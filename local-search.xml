<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>枚举，宏，多文件</title>
    <link href="/2023/07/09/%E6%9E%9A%E4%B8%BE%EF%BC%8C%E5%AE%8F%EF%BC%8C%E5%A4%9A%E6%96%87%E4%BB%B6/"/>
    <url>/2023/07/09/%E6%9E%9A%E4%B8%BE%EF%BC%8C%E5%AE%8F%EF%BC%8C%E5%A4%9A%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h1><ul><li>枚举的定义<br>enum 枚举名{枚举元素1，枚举元素2};<br>在“枚举”类型的定义中列举出所有可能的取值，被说明为该“枚举”类型的变量取值不能超过定义的范围<br>枚举元素列表中,每个元素只能是整型，如果不指定某个元素的大小那么默认是从0开始<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> _CRT_SECURE_NO_WARNINGS 1</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">color</span>&#123;</span>red,yellow,green,blue,black&#125;;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">char</span> get_color;<br>    <br>    <span class="hljs-comment">//printf(&quot;%d\n&quot;,red);</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;input the color:&quot;</span>);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;get_color);<br>   <br>    <span class="hljs-keyword">switch</span> (get_color)<br>    &#123;<br>    <span class="hljs-keyword">case</span> red:<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;it is red&quot;</span>);<br>        <span class="hljs-keyword">break</span>;<br>    <br>    <span class="hljs-keyword">default</span>:<br>        <span class="hljs-keyword">break</span>;<br>    &#125;<br>    <br>    <br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>用typedef关键字将枚举类型定义别名，并用别名进行变量申明<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">workday</span>&#123;</span><br>    saturday,<br>    sunday,<br>    monday,<br>    tuesday,<br>    wednesday,<br>    thursday,<br>    friday,<br>&#125;workday<br>workday today;<br></code></pre></td></tr></table></figure>在stm32开发库中用枚举方法非常多<br>如:<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">enum</span></span><br><span class="hljs-class">&#123;</span><br>    LED1=<span class="hljs-number">0</span>,<br>    LED2=<span class="hljs-number">1</span>,<br>    LED3=<span class="hljs-number">2</span>,<br>    LED4=<span class="hljs-number">3</span>,<br>&#125;LED_typedef;<br></code></pre></td></tr></table></figure></li></ul><h1 id="typedef关键字"><a href="#typedef关键字" class="headerlink" title="typedef关键字"></a>typedef关键字</h1><p>能够让用户自己为数据类型取别名(起外号)，作用是减少声明错误<br>定义格式:<br>typedef 原类型名 新类型名;<br>如：<br>typedef int ZHENGXING;<br>ZHENGXING a&#x3D; 10;&#x2F;&#x2F;等价于int a&#x3D;10</p><ul><li>给一个已经存在的的类型取别名的技巧</li></ul><ol><li>为基本类型取别名<br>typedef int ZX；</li><li>为数去类型取别名<br>typedef char NAME[20];<br>表示:<br>NAME是字符数组类型，数组长度为20<br>然后可用NAME 定义变量，如:<br>NAME a1,a2,s1,s2;<br>char a1[20], a2[20], s1[20], s2[20];  </li><li>结构体类型</li></ol><ul><li>第1种<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Person</span>&#123;</span><br>    <span class="hljs-type">int</span> age;<br>    <span class="hljs-type">char</span> *name; <br>&#125; PersonType;<br></code></pre></td></tr></table></figure></li><li>第2种   <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span>&#123;</span><br>    <span class="hljs-type">int</span> year;<br>    <span class="hljs-type">int</span> month;<br>    <span class="hljs-type">int</span> day;<br>&#125; Date;<br></code></pre></td></tr></table></figure></li><li>第3种<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Person</span> <span class="hljs-title">PersonType</span>;</span><br></code></pre></td></tr></table></figure></li></ul><ol start="4"><li>枚举类型</li></ol><ul><li>第1种<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">Sex</span>&#123;</span> SexMan, SexWoman, SexOther &#125;; <br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">enum</span> <span class="hljs-title">Sex</span> <span class="hljs-title">SexType</span>;</span><br></code></pre></td></tr></table></figure></li><li>第2种<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">enum</span> _<span class="hljs-title">Sex</span>&#123;</span> SexMan, SexWoman, SexOther &#125; Sex; <br>Sex sex = SexOther;<br></code></pre></td></tr></table></figure></li><li>第3种<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">enum</span>&#123;</span> ColorRed, ColorBule, ColorGreen, ColorYellow&#125; Color;<br>Color color = ColorGreen;<br></code></pre></td></tr></table></figure></li></ul><ol start="5"><li>函数指针取别名<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 给指针函数起别名</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-title function_">int</span> <span class="hljs-params">(*FUN)</span><span class="hljs-params">(<span class="hljs-type">int</span>, <span class="hljs-type">int</span>)</span>;<br><span class="hljs-comment">// 用别名定义两个指针变量 </span><br>FUN f1,f2;<br><span class="hljs-comment">// 给函数指针初始化 </span><br>f1 = sum;  <span class="hljs-comment">// sum是1个函数的名字</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,f1(<span class="hljs-number">12</span>,<span class="hljs-number">34</span>));<br></code></pre></td></tr></table></figure></li></ol><h1 id="define宏"><a href="#define宏" class="headerlink" title="define宏"></a>define宏</h1><p>预处理（预编译）<br>源代码在编译成机器指令之前要进行预处理</p><p>预处理阶段可以根据预处理指令，(以#开头)执行 一些列操作</p><p>预处理可以在编译之前处理及修改C 源代码</p><p>完成预处理阶段，并分析及执行了所有的预处理指令之后，这些指令就不再出现在源代码中</p><p>如#include 和 #define 指令</p><h2 id="宏的概念"><a href="#宏的概念" class="headerlink" title="宏的概念"></a>宏的概念</h2><p>宏可以分为有参宏和无参宏</p><ol><li>无参宏<br>假如程序中是使用某个数值多次，当需要修改的时候，需要花费很大的力气去进行修改；但是如果采用宏则很方便的解决这个问题</li></ol><ul><li>使用注意事项<ul><li>习惯上宏名也是标示符，建议用大写字母表示，以便与变量区别</li><li>字符串可以是常量，表达式，格式串，数据类型等，无论写什么都会原封不动的替换掉</li><li>无分号，宏定义是指令，所以末尾不加分号定义位置</li></ul></li><li>作用阈<ul><li>定义必须写在函数外面，作用域为宏定义命令到源程序结束</li><li>终止作用域可以使用#undef命令</li><li>宏可以嵌套定义</li></ul></li></ul><ol start="2"><li>有参宏</li></ol><ul><li>使用注意事项<ul><li>定义符合规范 : 形参之间可以出现空格，但是宏名和形参表之间不能有空格出现</li><li>形参只是简单的符号代换，不需要分配内存空间，不存在值传递问题</li><li>通常加括号( )利于代码的可读性</li><li>字符串可以放多个语句</li></ul></li></ul><h1 id="include指令"><a href="#include指令" class="headerlink" title="#include指令"></a>#include指令</h1><ol><li>#include “ “ 意义是包含一个用户定义的文件，可以是头文件，也可是普通文件</li><li>#include &lt;&gt; 意义是包含一个系统(编译器自带)的头文件</li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>struct结构体</title>
    <link href="/2023/07/09/struct%E7%BB%93%E6%9E%84%E4%BD%93/"/>
    <url>/2023/07/09/struct%E7%BB%93%E6%9E%84%E4%BD%93/</url>
    
    <content type="html"><![CDATA[<h1 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h1><p>能将不同的数据组合在一起，来描述一个对象</p><ul><li>结构体格式<br>struct 结构名{<br>数据类型;<br>};</li><li>定义结构体方式</li></ul><ol><li>先定义结构体，再定义结构体变量<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//先定义结构体类型</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stu</span>&#123;</span><br>    <span class="hljs-type">int</span> num;<br>    <span class="hljs-type">char</span> name[<span class="hljs-number">20</span>];<br>    <span class="hljs-type">char</span> sex;<br>    <span class="hljs-type">float</span> score;<br>&#125;;<br><span class="hljs-comment">//在定义结构体变量</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stu</span> <span class="hljs-title">boy1</span>,<span class="hljs-title">boy2</span>;</span> <br></code></pre></td></tr></table></figure></li><li>定义结构体同时定义结构体变量<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//同时定义</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stu</span>&#123;</span><br>    <span class="hljs-type">int</span> num;<br>    <span class="hljs-type">char</span> name[<span class="hljs-number">20</span>];<br>    <span class="hljs-type">char</span> sex;<br>    <span class="hljs-type">float</span> score;<br>&#125;boy1,boy2;<br></code></pre></td></tr></table></figure></li><li>匿名结构体定义结构体变量 <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//没有定义结构体名</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> &#123;</span><br>    <span class="hljs-type">int</span> num;<br>    <span class="hljs-type">char</span> name[<span class="hljs-number">20</span>];<br>    <span class="hljs-type">char</span> sex;<br>    <span class="hljs-type">float</span> score;<br>&#125;boy1,boy2;<br></code></pre></td></tr></table></figure>结构体类型没有名字，只能定义一次结构体变量即后续不能定义新</li></ol><ul><li>使用结构体变量</li></ul><ol><li>因为结构体变量就好比是多个数据类型的数据混合而成的，所以要想使用结构体变量的中的数据，就需要访问结构体变量的成员<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//同时定义</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stu</span>&#123;</span><br>    <span class="hljs-type">int</span> num;<br>    <span class="hljs-type">char</span> name[<span class="hljs-number">20</span>];<br>    <span class="hljs-type">char</span> sex;<br>    <span class="hljs-type">float</span> score;<br>&#125;boy1,boy2;<br><br>boy1.num=<span class="hljs-number">30</span>;<br>boy2.score=<span class="hljs-number">100</span>;<br></code></pre></td></tr></table></figure></li><li>如果成员本身又是一个结构则必须逐级找到最低级的成员才能使用</li></ol><h1 id="结构体变量初始化"><a href="#结构体变量初始化" class="headerlink" title="结构体变量初始化"></a>结构体变量初始化</h1><ol><li>全部初始化和部分初始化<br>初始化值的类型和顺序必须与结构体定义的时候成员的类型和顺序一 致<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//全部</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stu</span>&#123;</span><br>    <span class="hljs-type">int</span> num;<br>    <span class="hljs-type">char</span> name[<span class="hljs-number">20</span>];<br>    <span class="hljs-type">char</span> sex;<br>    <span class="hljs-type">float</span> score;<br>&#125;student1=&#123;<span class="hljs-number">101</span>,<span class="hljs-string">&quot;cjj&quot;</span>,<span class="hljs-string">&#x27;m&#x27;</span>,<span class="hljs-number">88.9</span>&#125;;<br><span class="hljs-comment">//部分</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stu</span>&#123;</span><br>    <span class="hljs-type">int</span> num;<br>    <span class="hljs-type">char</span> name[<span class="hljs-number">20</span>];<br>    <span class="hljs-type">char</span> sex;<br>    <span class="hljs-type">float</span> score;<br>&#125;student1=&#123;.name=<span class="hljs-string">&quot;cjj&quot;</span>&#125;;<br></code></pre></td></tr></table></figure></li><li>先定义结构体变量再初始化<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//同时定义</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stu</span>&#123;</span><br>    <span class="hljs-type">int</span> num;<br>    <span class="hljs-type">char</span> name[<span class="hljs-number">20</span>];<br>    <span class="hljs-type">char</span> sex;<br>    <span class="hljs-type">float</span> score;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stu</span> <span class="hljs-title">boy1</span>;</span><br>boy1.num=<span class="hljs-number">1010</span>;<br></code></pre></td></tr></table></figure></li></ol><ul><li>注意：不能给数组名赋值(数组名是一个常量，不能赋值)<br>解决办法：<br>strcpy(boy1.name, “cjj”);<br>将char name[20];改为 char *name;</li></ul><ol start="3"><li>给结构体变量整体赋值(但是得加强转)<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//同时定义</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stu</span>&#123;</span><br>    <span class="hljs-type">int</span> num;<br>    <span class="hljs-type">char</span> name[<span class="hljs-number">20</span>];<br>    <span class="hljs-type">char</span> sex;<br>    <span class="hljs-type">float</span> score;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stu</span> <span class="hljs-title">boy1</span>;</span><br>boy1=(<span class="hljs-keyword">struct</span> stu)&#123;<span class="hljs-number">101</span>,<span class="hljs-string">&quot;cjj&quot;</span>,<span class="hljs-string">&#x27;m&#x27;</span>,<span class="hljs-number">88.9</span>&#125;;<br><span class="hljs-comment">//如果不进行强制类型转换，系统无法知道&#123;&#125; 是给数组赋值还是给结构体赋值</span><br></code></pre></td></tr></table></figure></li><li>两个相同类型的结构体变量的赋值，相当普通变量的赋值,是整体拷贝，而不是地址赋值<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//</span><br><span class="hljs-comment">// Created by wangmingdong on 2023/6/8.</span><br><span class="hljs-comment">//</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdio.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdlib.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;string.h&quot;</span></span><br><br><span class="hljs-comment">// 定义结构体类型</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stu</span> &#123;</span><br>    <span class="hljs-type">int</span> num;<br>    <span class="hljs-type">char</span> name[<span class="hljs-number">20</span>];<br>    <span class="hljs-type">char</span> gender;<br>    <span class="hljs-type">float</span> score;<br>&#125;;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br><br>    <span class="hljs-comment">// 定义结构体变量</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stu</span> <span class="hljs-title">boy</span>, <span class="hljs-title">girl</span>;</span><br><br>    <span class="hljs-comment">// 给结构体变量boy中的成员赋值</span><br>    boy = (<span class="hljs-keyword">struct</span> stu)&#123;<span class="hljs-number">101</span>, <span class="hljs-string">&quot;wangmingdong&quot;</span>, <span class="hljs-string">&#x27;m&#x27;</span>, <span class="hljs-number">88.7</span>&#125;;<br>    girl = boy; <span class="hljs-comment">// 复制boy结构体变量中的所有数据给girl这个结构体变量</span><br><br>    <span class="hljs-comment">// 修改girl这个结构体变量中的成员的数据</span><br>    girl.num = <span class="hljs-number">102</span>;<br><br>    <span class="hljs-comment">// 打印学生的信息</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;boy,学号:%d, 姓名：%s, 性别:%c, 分数:%.2f\n&quot;</span>, boy.num, boy.name, boy.gender, boy.score);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;girl,学号:%d, 姓名：%s, 性别:%c, 分数:%.2f\n&quot;</span>, boy.num, boy.name, boy.gender, boy.score);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><h1 id="结构体变量空间"><a href="#结构体变量空间" class="headerlink" title="结构体变量空间"></a>结构体变量空间</h1><p>按字节数高的变量计算</p><h1 id="结构体数组"><a href="#结构体数组" class="headerlink" title="结构体数组"></a>结构体数组</h1><p>如果一个数组，每个元素都是一个结构体类型，那么这个数组称为： 结构体数组<br>在实际应用中，经常用结构数组来表示具有相同数据结构的一个群体，如一个班的学生档案，一个车间职工的工资表等  </p><ul><li>结构体数组格式<br>struct 结构体名{<br>  结构体成员<br>}数组名;</li><li>结构体数组初始化</li></ul><ol><li>定义的同时初始化<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stu</span>&#123;</span><br>    <span class="hljs-type">int</span> age;<br>    <span class="hljs-type">char</span> *name;<br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stu</span> <span class="hljs-title">boy</span>[2]=</span>&#123;&#123;<span class="hljs-number">11</span>,<span class="hljs-string">&#x27;hb&#x27;</span>&#125;,&#123;<span class="hljs-number">22</span>,<span class="hljs-string">&#x27;cs&#x27;</span>&#125;&#125;;<br><br></code></pre></td></tr></table></figure></li><li>先定义后初始化,整体赋值<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stu</span>&#123;</span><br>    <span class="hljs-type">int</span> age;<br>    <span class="hljs-type">char</span> *name;<br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stu</span> <span class="hljs-title">boy</span>[2];</span><br>boy[<span class="hljs-number">0</span>]=(<span class="hljs-keyword">struct</span> stu)&#123;<span class="hljs-number">11</span>,<span class="hljs-string">&#x27;hb&#x27;</span>&#125;;<br>boy[<span class="hljs-number">1</span>]=(<span class="hljs-keyword">struct</span> stu)&#123;<span class="hljs-number">11</span>,<span class="hljs-string">&#x27;cs&#x27;</span>&#125;;<br><br></code></pre></td></tr></table></figure></li><li>先定义后初始化<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stu</span>&#123;</span><br>    <span class="hljs-type">int</span> age;<br>    <span class="hljs-type">char</span> *name;<br>&#125;;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stu</span> <span class="hljs-title">boy</span>[2];</span><br>boy[<span class="hljs-number">0</span>].age=<span class="hljs-number">11</span>;<br>boy[<span class="hljs-number">0</span>]=<span class="hljs-string">&#x27;cs&#x27;</span>;<br><br></code></pre></td></tr></table></figure></li></ol><h1 id="结构体数组遍历"><a href="#结构体数组遍历" class="headerlink" title="结构体数组遍历"></a>结构体数组遍历</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stu</span>&#123;</span><br>    <span class="hljs-type">int</span> num;<br>    <span class="hljs-type">char</span> *name;<br>    <span class="hljs-type">char</span> sex;<br>    <span class="hljs-type">float</span> score; <br>&#125;;<br><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stu</span> <span class="hljs-title">boys</span>[5]=</span>&#123;<br>    &#123;<span class="hljs-number">101</span>,<span class="hljs-string">&quot;Li ping&quot;</span>,<span class="hljs-string">&#x27;F&#x27;</span>,<span class="hljs-number">45</span>&#125;, <br>    &#123;<span class="hljs-number">102</span>,<span class="hljs-string">&quot;Zhang ping&quot;</span>,<span class="hljs-string">&#x27;M&#x27;</span>,<span class="hljs-number">62.5</span>&#125;,<br>    &#123;<span class="hljs-number">103</span>,<span class="hljs-string">&quot;He fang&quot;</span>,<span class="hljs-string">&#x27;F&#x27;</span>,<span class="hljs-number">92.5</span>&#125;, <br>    &#123;<span class="hljs-number">104</span>,<span class="hljs-string">&quot;Cheng ling&quot;</span>,<span class="hljs-string">&#x27;M&#x27;</span>,<span class="hljs-number">87</span>&#125;, <br>    &#123;<span class="hljs-number">105</span>,<span class="hljs-string">&quot;Wang ming dong&quot;</span>,<span class="hljs-string">&#x27;M&#x27;</span>,<span class="hljs-number">58</span>&#125;<br>&#125;; <br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">5</span>;i++)&#123;<br>        <span class="hljs-comment">//做事</span><br><br>&#125;<br></code></pre></td></tr></table></figure><ul><li><p>1）利用上面stu的结构体，计算学生平均成绩和不及格的人数</p></li><li><p>2）打印80-100分学生的成绩及姓名</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//</span><br><span class="hljs-comment">// Created by wangmingdong on 2023/6/8.</span><br><span class="hljs-comment">//</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdio.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdlib.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;string.h&quot;</span></span><br><br><span class="hljs-comment">// 定义结构体类型</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stu</span> &#123;</span><br>    <span class="hljs-type">int</span> num;<br>    <span class="hljs-type">char</span> *name;<br>    <span class="hljs-type">char</span> sex;<br>    <span class="hljs-type">float</span> score;<br>&#125;;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stu</span> <span class="hljs-title">boys</span>[5] =</span> &#123;<br>            &#123;<span class="hljs-number">101</span>, <span class="hljs-string">&quot;Li ping&quot;</span>,        <span class="hljs-string">&#x27;F&#x27;</span>, <span class="hljs-number">45</span>&#125;,<br>            &#123;<span class="hljs-number">102</span>, <span class="hljs-string">&quot;Zhang ping&quot;</span>,     <span class="hljs-string">&#x27;M&#x27;</span>, <span class="hljs-number">62.5</span>&#125;,<br>            &#123;<span class="hljs-number">103</span>, <span class="hljs-string">&quot;He fang&quot;</span>,        <span class="hljs-string">&#x27;F&#x27;</span>, <span class="hljs-number">92.5</span>&#125;,<br>            &#123;<span class="hljs-number">104</span>, <span class="hljs-string">&quot;Cheng ling&quot;</span>,     <span class="hljs-string">&#x27;M&#x27;</span>, <span class="hljs-number">87</span>&#125;,<br>            &#123;<span class="hljs-number">105</span>, <span class="hljs-string">&quot;Wang ming dong&quot;</span>, <span class="hljs-string">&#x27;M&#x27;</span>, <span class="hljs-number">58</span>&#125;<br>    &#125;;<br><br>    <span class="hljs-type">float</span> sum_score_result = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> stu_num = <span class="hljs-keyword">sizeof</span>(boys) / <span class="hljs-keyword">sizeof</span>(boys[<span class="hljs-number">0</span>]);<br>    <span class="hljs-type">int</span> stu_level_e_num = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; stu_num; i++) &#123;<br>        sum_score_result += boys[i].score;<br>        <span class="hljs-keyword">if</span> (boys[i].score &lt; <span class="hljs-number">60</span>) &#123;<br>            stu_level_e_num++;<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;平均分:%f, 不及格的人数是:%d\n&quot;</span>, sum_score_result / stu_num, stu_level_e_num);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//</span><br><span class="hljs-comment">// Created by wangmingdong on 2023/6/8.</span><br><span class="hljs-comment">//</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdio.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdlib.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;string.h&quot;</span></span><br><br><span class="hljs-comment">// 定义结构体类型</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stu</span> &#123;</span><br>    <span class="hljs-type">int</span> num;<br>    <span class="hljs-type">char</span> *name;<br>    <span class="hljs-type">char</span> sex;<br>    <span class="hljs-type">float</span> score;<br>&#125;;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stu</span> <span class="hljs-title">boys</span>[5] =</span> &#123;<br>            &#123;<span class="hljs-number">101</span>, <span class="hljs-string">&quot;Li ping&quot;</span>,        <span class="hljs-string">&#x27;F&#x27;</span>, <span class="hljs-number">45</span>&#125;,<br>            &#123;<span class="hljs-number">102</span>, <span class="hljs-string">&quot;Zhang ping&quot;</span>,     <span class="hljs-string">&#x27;M&#x27;</span>, <span class="hljs-number">62.5</span>&#125;,<br>            &#123;<span class="hljs-number">103</span>, <span class="hljs-string">&quot;He fang&quot;</span>,        <span class="hljs-string">&#x27;F&#x27;</span>, <span class="hljs-number">92.5</span>&#125;,<br>            &#123;<span class="hljs-number">104</span>, <span class="hljs-string">&quot;Cheng ling&quot;</span>,     <span class="hljs-string">&#x27;M&#x27;</span>, <span class="hljs-number">87</span>&#125;,<br>            &#123;<span class="hljs-number">105</span>, <span class="hljs-string">&quot;Wang ming dong&quot;</span>, <span class="hljs-string">&#x27;M&#x27;</span>, <span class="hljs-number">58</span>&#125;<br>    &#125;;<br><br><br>    <span class="hljs-type">int</span> stu_num = <span class="hljs-keyword">sizeof</span>(boys) / <span class="hljs-keyword">sizeof</span>(boys[<span class="hljs-number">0</span>]);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; stu_num; i++) &#123;<br>        <span class="hljs-keyword">if</span> (boys[i].score &lt;= <span class="hljs-number">100</span> &amp;&amp; boys[i].score &gt;= <span class="hljs-number">80</span>) &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s,%.2f\n&quot;</span>, boys[i].name, boys[i].score);<br>        &#125;<br>    &#125;<br><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h1 id="结构体指针"><a href="#结构体指针" class="headerlink" title="结构体指针"></a>结构体指针</h1><p>用指针变量来存放结构体变量地址</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stu</span> &#123;</span><br>    <span class="hljs-type">int</span> num;<br>    <span class="hljs-type">char</span> *name;<br>    <span class="hljs-type">char</span> sex;<br>    <span class="hljs-type">float</span> score;<br>&#125;boy;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stu</span> *<span class="hljs-title">p</span>=</span><span class="hljs-literal">NULL</span>;<br>p=&amp;boy;<br><br></code></pre></td></tr></table></figure><p>结构指针变量，指向的是：结构变量的首地址 （即第一个成员的地址）</p><ul><li>结构体指针的初始化</li></ul><ol><li>先定义初始化</li><li>同时初始化<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stu</span> &#123;</span><br>    <span class="hljs-type">int</span> num;<br>    <span class="hljs-type">char</span> *name;<br>    <span class="hljs-type">char</span> sex;<br>    <span class="hljs-type">float</span> score;<br>&#125;boy;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stu</span> *<span class="hljs-title">p</span>=</span><span class="hljs-literal">NULL</span>;<br>p=&amp;boy;<br><span class="hljs-comment">/********************/</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stu</span> *<span class="hljs-title">p</span>=</span>&amp;boy;<br></code></pre></td></tr></table></figure></li></ol><ul><li>结构体指针变量的使用<br>2中格式<br>(*p).成员名或者p-&gt;成员名;<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//</span><br><span class="hljs-comment">// Created by wangmingdong on 2023/6/8.</span><br><span class="hljs-comment">//</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdio.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdlib.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;string.h&quot;</span></span><br><br><span class="hljs-comment">// 定义结构体类型</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stu</span> &#123;</span><br>    <span class="hljs-type">int</span> num;<br>    <span class="hljs-type">char</span> name[<span class="hljs-number">20</span>];<br>    <span class="hljs-type">int</span> age;<br>&#125;;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stu</span> <span class="hljs-title">boy</span>;</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stu</span> *<span class="hljs-title">p</span>;</span><br><br>    p = &amp;boy;<br><br>    <span class="hljs-comment">// 使用结构体变量操作成员</span><br>    boy.num = <span class="hljs-number">100</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;num=%d\n&quot;</span>, boy.num);<br>    <span class="hljs-comment">// 使用结构体指针变量操作成员</span><br>    (*p).num = <span class="hljs-number">200</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;num=%d\n&quot;</span>, (*p).num);<br>    p-&gt;num = <span class="hljs-number">300</span>;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;num=%d\n&quot;</span>, p-&gt;num);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h1 id="结构体嵌套"><a href="#结构体嵌套" class="headerlink" title="结构体嵌套"></a>结构体嵌套</h1><p>一个结构体内有另一个结构体</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//</span><br><span class="hljs-comment">// Created by wangmingdong on 2023/6/8.</span><br><span class="hljs-comment">//</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdio.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdlib.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;string.h&quot;</span></span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">birthday</span> &#123;</span><br>    <span class="hljs-type">int</span> year;<br>    <span class="hljs-type">int</span> month;<br>    <span class="hljs-type">int</span> day;<br>&#125;;<br><br><span class="hljs-comment">// 定义结构体类型</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stu</span> &#123;</span><br>    <span class="hljs-type">int</span> num;<br>    <span class="hljs-type">char</span> name[<span class="hljs-number">20</span>];<br>    <span class="hljs-type">int</span> age;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">birthday</span> <span class="hljs-title">date</span>;</span><br>&#125;;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stu</span> <span class="hljs-title">boy</span>;</span><br>    boy.num = <span class="hljs-number">100</span>;<br>    <span class="hljs-built_in">strcpy</span>(boy.name, <span class="hljs-string">&quot;wangmingdong&quot;</span>);<br>    boy.age = <span class="hljs-number">35</span>;<br>    boy.date = (<span class="hljs-keyword">struct</span> birthday) &#123;<span class="hljs-number">1989</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>&#125;;<br><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stu</span> *<span class="hljs-title">p</span> =</span> &amp;boy;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d,%s,%d-%d-%d\n&quot;</span>, p-&gt;num, p-&gt;name, p-&gt;date.year, p-&gt;date.month, p-&gt;date.day);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">/*************3层结构体嵌套***************/</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// Created by wangmingdong on 2023/6/8.</span><br><span class="hljs-comment">//</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdio.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdlib.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;string.h&quot;</span></span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">birthtime</span>&#123;</span><br>    <span class="hljs-type">int</span> hour;<br>    <span class="hljs-type">int</span> minute;<br>    <span class="hljs-type">int</span> second;<br>&#125;;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">birthday</span> &#123;</span><br>    <span class="hljs-type">int</span> year;<br>    <span class="hljs-type">int</span> month;<br>    <span class="hljs-type">int</span> day;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">birthtime</span> <span class="hljs-title">time</span>;</span><br>&#125;;<br><br><span class="hljs-comment">// 定义结构体类型</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stu</span> &#123;</span><br>    <span class="hljs-type">int</span> num;<br>    <span class="hljs-type">char</span> name[<span class="hljs-number">20</span>];<br>    <span class="hljs-type">int</span> age;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">birthday</span> <span class="hljs-title">date</span>;</span><br>&#125;;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stu</span> <span class="hljs-title">boy</span>;</span><br>    boy.num = <span class="hljs-number">100</span>;<br>    <span class="hljs-built_in">strcpy</span>(boy.name, <span class="hljs-string">&quot;wangmingdong&quot;</span>);<br>    boy.age = <span class="hljs-number">35</span>;<br>    boy.date = (<span class="hljs-keyword">struct</span> birthday) &#123;<span class="hljs-number">1989</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, &#123;<span class="hljs-number">11</span>, <span class="hljs-number">22</span>, <span class="hljs-number">33</span>&#125;&#125;;<br><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stu</span> *<span class="hljs-title">p</span> =</span> &amp;boy;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d,%s,%d-%d-%d\n&quot;</span>, p-&gt;num, p-&gt;name, p-&gt;date.year, p-&gt;date.month, p-&gt;date.day);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d:%d:%d\n&quot;</span>, p-&gt;date.time.hour,p-&gt;date.time.minute, p-&gt;date.time.second);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><h1 id="结构体变量做函数实参"><a href="#结构体变量做函数实参" class="headerlink" title="结构体变量做函数实参"></a>结构体变量做函数实参</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Time</span>&#123;</span><br>    <span class="hljs-type">int</span> year;<br>    <span class="hljs-type">int</span> month;<br>    <span class="hljs-type">int</span> day;<br><br>&#125;;<br><span class="hljs-type">void</span> <span class="hljs-title function_">changeTime</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> Time tempTime)</span>&#123;<br>    tempTime.year=<span class="hljs-number">2001</span>;<br>    tempTime.month=<span class="hljs-number">12</span>;<br>    tempTime.day=<span class="hljs-number">12</span>;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Time</span> <span class="hljs-title">t</span>=</span>&#123;<span class="hljs-number">2000</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>&#125;;<br>    changeTime(t);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d年%d月%d日&quot;</span>,t.year,t.month,t.day);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>注意：</p><p>这种传送要将全部成员逐个传送，特别是成员为数组时将会使传送的时间和空间开销很大，严重地降低了程序的效率<br>那怎么办？？？</p><p>答：使用指针，即用指针变量作函数参数进行传送从而减少了时间和空间的开销</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Time</span>&#123;</span><br>    <span class="hljs-type">int</span> year;<br>    <span class="hljs-type">int</span> month;<br>    <span class="hljs-type">int</span> day;<br><br>&#125;;<br><span class="hljs-type">void</span> <span class="hljs-title function_">changeTime</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> Time *tempTime)</span>&#123;<br>    (*tempTime.year)=<span class="hljs-number">2001</span>;<br>    (*tempTime.month)=<span class="hljs-number">12</span>;<br>    (*tempTime.day)=<span class="hljs-number">12</span>;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Time</span> <span class="hljs-title">t</span>=</span>&#123;<span class="hljs-number">2000</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>&#125;;<br>    changeTime(&amp;t);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d年%d月%d日&quot;</span>,t.year,t.month,t.day);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>内存操作</title>
    <link href="/2023/07/06/%E5%86%85%E5%AD%98%E6%93%8D%E4%BD%9C/"/>
    <url>/2023/07/06/%E5%86%85%E5%AD%98%E6%93%8D%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<h1 id="内存分类"><a href="#内存分类" class="headerlink" title="内存分类"></a>内存分类</h1><ol><li>栈区(stack):由系统自动分配</li><li>堆区(heap):在程序的执行过程中才能分配,由程序员决定</li><li>全局区(静态区):静态区存放程序中所有的全局变量和静态变量</li><li>常量区：常量字符串就是放在这</li></ol><ul><li>代码段：通常是指用来存放代码的内存区域。代码区的指令就是包括操作码和要操作的对象(或对象的引用地址)，如果是立即数(具体的数字5)则包含在代码中，如果是局部数据则存放在栈区，然后代码段中引用该数据地址</li><li>数据段：存放程序中已初始化的全局变量的一块内存，属于静态内存分配</li><li>BSS段：属于数据段的一种，区别是数据段存放的是初始化非0的全局变量而BSS段存放显示初始化为0或未初始化的全局变量（C语言规定未显示初始化的全局变量为0）</li></ul><h1 id="栈区"><a href="#栈区" class="headerlink" title="栈区"></a>栈区</h1><p>由编译器自动分配释放，存放函数的参数值、局部变量的值等，是一种先进后出的内存结构。</p><h2 id="那么有哪些分配在栈区呢？"><a href="#那么有哪些分配在栈区呢？" class="headerlink" title="那么有哪些分配在栈区呢？"></a>那么有哪些分配在栈区呢？</h2><ol><li>局部变量的值是放在栈区</li><li>函数体中定义的变量通常是放在栈上</li></ol><h2 id="函数栈的分配"><a href="#函数栈的分配" class="headerlink" title="函数栈的分配"></a>函数栈的分配</h2><p>在函数调用时，第一个进栈的是主函数中函数调用后的下一条指令（函数调用语句的下一条可执行语句）的地址，然后是函数的各个参数，在大多数的C编译器中，参数是由右往左入栈的，然后是函数中的局部变量。详细见link:<a href="http://t.csdn.cn/MOx6k">http://t.csdn.cn/MOx6k</a></p><h2 id="栈内存什么时候回收？"><a href="#栈内存什么时候回收？" class="headerlink" title="栈内存什么时候回收？"></a>栈内存什么时候回收？</h2><p>栈内存的分配和释放也由编译器在函数进入和退出时插入指令自动完成，生命周期和函数、局部变量一样。</p><h2 id="栈空间的大小"><a href="#栈空间的大小" class="headerlink" title="栈空间的大小"></a>栈空间的大小</h2><p>在 Windows下，栈是向低地址扩展的数据结构，是块连续的内存的区域。栈空间一般较小，栈大小与编译器有关。默认情况下，visual studio 2010的栈大小为1M。但在平时应用程序中，由于函数会使用栈结果，所以只能用略小于1M大小的栈如果申请的空间超过栈的剩余空间时，将提示Stack overflow。</p><h1 id="堆区-heap"><a href="#堆区-heap" class="headerlink" title="堆区(heap)"></a>堆区(heap)</h1><p>程序员自行申请的空间，并可在运行时指定空间大小，并由程序员手动进行释放，容易产生 memory leak。使用malloc,realloc,calloc函数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">//分配得来得10*4字节的区域在堆区</span><br>p1 = (<span class="hljs-type">char</span>*)<span class="hljs-built_in">malloc</span>(<span class="hljs-number">10</span>*<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>));<br></code></pre></td></tr></table></figure><p>堆是由 malloc()等函数分配的内存块，内存释放由程序员调用free()函数手动释放</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-type">int</span>  <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>   <span class="hljs-comment">//手动分配、这里就是分配了堆内存</span><br>   <span class="hljs-type">int</span>  *p = (<span class="hljs-type">int</span>*)<span class="hljs-built_in">malloc</span>(<span class="hljs-number">10</span> *  <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span> ));<br><br>   <span class="hljs-comment">//手动释放</span><br>   <span class="hljs-built_in">free</span>(p);<br><br>   <span class="hljs-type">int</span> MB = <span class="hljs-number">0</span>;<br>   <span class="hljs-keyword">while</span> (<span class="hljs-built_in">malloc</span>(<span class="hljs-number">1024</span> * <span class="hljs-number">1024</span>))<span class="hljs-comment">//每次分配1M</span><br>   &#123;<br>       MB++;<br>   &#125;<br>   <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;分配了 %d MB \n&quot;</span>, MB); <br><br>   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="栈与堆的区别"><a href="#栈与堆的区别" class="headerlink" title="栈与堆的区别"></a>栈与堆的区别</h2><table><thead><tr><th align="center">类型</th><th align="center">分配释放</th><th align="center">大小</th><th align="center">是否连续</th><th align="center">申请效率</th></tr></thead><tbody><tr><td align="center">栈区</td><td align="center">由编译器自动分配释放</td><td align="center">较小</td><td align="center">一块连续的内存区域</td><td align="center">由系统自动分配，速度快</td></tr><tr><td align="center">堆区</td><td align="center">由程序员分配释放</td><td align="center">较大</td><td align="center">堆是向高地址扩展的数据结构，是不连续的内存区域</td><td align="center">速度慢，容易产生内存碎片</td></tr></tbody></table><h1 id="全局区（静态区）"><a href="#全局区（静态区）" class="headerlink" title="全局区（静态区）"></a>全局区（静态区）</h1><p>全局变量和静态变量的存储是放在一块的，初始化的全局变量和静态变量在块区域。</p><h2 id="哪些分配在全局区"><a href="#哪些分配在全局区" class="headerlink" title="哪些分配在全局区"></a>哪些分配在全局区</h2><ol><li>全局变量</li><li>static静态变量</li></ol><h2 id="全局静态区何时释放"><a href="#全局静态区何时释放" class="headerlink" title="全局静态区何时释放"></a>全局静态区何时释放</h2><p>全局变量、静态变量在整个程序运行的生存期都存在，所以在程序结束时才释放</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><br><span class="hljs-comment">//储存在全局静态区</span><br><span class="hljs-type">int</span>   a;  <span class="hljs-comment">//全局变量，未初始化</span><br><span class="hljs-type">short</span>   b = <span class="hljs-number">10</span>;<span class="hljs-comment">//全局变量，已赋值</span><br><span class="hljs-type">char</span>  *c = <span class="hljs-literal">NULL</span>;<span class="hljs-comment">//全局变量，已赋值</span><br><span class="hljs-type">static</span>  <span class="hljs-type">int</span>   f = <span class="hljs-number">200</span>;<span class="hljs-comment">//静态变量</span><br><br><span class="hljs-type">int</span>  <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>   <span class="hljs-type">static</span>  <span class="hljs-type">int</span>  d = <span class="hljs-number">100</span>;<br>   <span class="hljs-type">static</span>  <span class="hljs-type">int</span>  e = <span class="hljs-number">200</span>;<br><br>   <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%p\n&quot;</span>, &amp;a);<br>   <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%p\n&quot;</span>, &amp;b);<br>   <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%p\n&quot;</span>, &amp;c);<br>   <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%p\n&quot;</span>, &amp;d);<br>   <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%p\n&quot;</span>, &amp;e);<br>   <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%p\n&quot;</span>, &amp;f);<br><br><span class="hljs-comment">/******运行结果*******/</span><br><span class="hljs-comment">//001B7164</span><br><span class="hljs-comment">//001B7038</span><br><span class="hljs-comment">//001B7168</span><br><span class="hljs-comment">//001B7040</span><br><span class="hljs-comment">//001B7044</span><br><span class="hljs-comment">//001B703C</span><br><span class="hljs-comment">/********************/</span><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="malloc、calloc、realloc的使用"><a href="#malloc、calloc、realloc的使用" class="headerlink" title="malloc、calloc、realloc的使用"></a>malloc、calloc、realloc的使用</h1><p>malloc：是申请一定空间大小的内存，但是其内存上的值是随机的<br>calloc：是申请一定空间大小的内存，其内存上的值是初始化为0<br>realloc：放大或缩小动态内存</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-type">int</span>  <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>   <span class="hljs-comment">//malloc  ,参数是字节数 , 并且这块内存空间的值是随机的</span><br>   <span class="hljs-type">int</span>  *p = (<span class="hljs-type">int</span> *)<span class="hljs-built_in">malloc</span>(<span class="hljs-number">5</span> *  <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>));<br>   p[<span class="hljs-number">0</span>] = <span class="hljs-number">123</span>;<br>   <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; ++i)<br>   &#123; <br>   <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d   &quot;</span>, p[i]); <span class="hljs-comment">//后面4个值随机</span><br>   &#125;<br>   <br>   <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n------------------------------------------------------------\n &quot;</span> );<br><br>   <span class="hljs-comment">//calloc，参数两个， 自动将内存空间初始化为0</span><br>   <span class="hljs-type">int</span>   *p2 = (<span class="hljs-type">int</span> *)<span class="hljs-built_in">calloc</span>(<span class="hljs-number">5</span>, <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>));<br>   p2[<span class="hljs-number">4</span>] = <span class="hljs-number">123</span>;<br>   <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; ++i)<br>   &#123;<br>   <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d   &quot;</span>, p2[i]); <br>   &#125;<br><br>   <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n------------------------------------------------------------\n &quot;</span>);<br>    <br>   <span class="hljs-comment">//realloc ，可以调整内存空间的大小 ，并且拷贝原来的内容(调大，或者  缩小)</span><br>   <span class="hljs-comment">//int  *p3 =(int *) realloc(p, 6* sizeof(int));//调大一点点，两个地址相同</span><br>   <span class="hljs-comment">//int  *p3 = (int *)realloc(p, 2 * sizeof(int));//缩小，两个地址相同</span><br>   <span class="hljs-type">int</span>  *p3 = (<span class="hljs-type">int</span> *)<span class="hljs-built_in">realloc</span>(p, <span class="hljs-number">100</span> * <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>));<span class="hljs-comment">//调很大，两个地址不同 ,释放原来的内存空间</span><br>   <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;<span class="hljs-number">2</span>; ++i)<br>   &#123;<br>   <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d   &quot;</span>, p3[i]);<br>   &#125; <br><br>   <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\np地址：  %p   ，  p3的地址：  %p   &quot;</span>, p,  p3);<br><br>   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h1 id="strcpy、memcpy、memmove函数"><a href="#strcpy、memcpy、memmove函数" class="headerlink" title="strcpy、memcpy、memmove函数"></a>strcpy、memcpy、memmove函数</h1><h2 id="strcpy函数"><a href="#strcpy函数" class="headerlink" title="strcpy函数"></a>strcpy函数</h2><p>把src中用\0结束的字符串，复制到dest数组中</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-type">char</span> *<span class="hljs-title function_">strcpy</span><span class="hljs-params">(</span><br><span class="hljs-params">  <span class="hljs-type">char</span> *strDestination,</span><br><span class="hljs-params">  <span class="hljs-type">const</span> <span class="hljs-type">char</span> *strSource</span><br><span class="hljs-params">)</span>;<br></code></pre></td></tr></table></figure><ul><li>注意<br>src和dest所指内存区不能重叠,dest必须有足够的空间，src必须是以\0结束,返回指向dest的指针。</li></ul><h2 id="memcpy"><a href="#memcpy" class="headerlink" title="memcpy"></a>memcpy</h2><p>由src所指内存区域复制 count个字节到dest所指内存区域。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> *<span class="hljs-title function_">memcpy</span><span class="hljs-params">(</span><br><span class="hljs-params">  <span class="hljs-type">void</span> *dest,</span><br><span class="hljs-params">  <span class="hljs-type">const</span> <span class="hljs-type">void</span> *src,</span><br><span class="hljs-params">  <span class="hljs-type">size_t</span> count</span><br><span class="hljs-params">)</span>;<br></code></pre></td></tr></table></figure><ul><li>注意<br>函数返回指向dest的指针和 strcpy相比，memcpy不是遇到\0就结束，而一定会拷贝n个字节注意src和dest所指内存区域不能重叠，否则不能保证正确。</li></ul><h2 id="memmove函数"><a href="#memmove函数" class="headerlink" title="memmove函数"></a>memmove函数</h2><p>函数功能：与 memcpy相同。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> *<span class="hljs-title function_">memmove</span><span class="hljs-params">(</span><br><span class="hljs-params">  <span class="hljs-type">void</span> *dest,</span><br><span class="hljs-params">  <span class="hljs-type">const</span> <span class="hljs-type">void</span> *src,</span><br><span class="hljs-params">  <span class="hljs-type">size_t</span> count</span><br><span class="hljs-params">)</span>;<br><span class="hljs-type">void</span> *<span class="hljs-title function_">memmove</span><span class="hljs-params">(<span class="hljs-type">void</span> *dest, <span class="hljs-type">const</span> <span class="hljs-type">void</span> *src, <span class="hljs-type">size_t</span> n)</span><br>&#123;<br>    <span class="hljs-type">char</span> *d = dest;<br>    <span class="hljs-type">const</span> <span class="hljs-type">char</span> *s = src;<br><br>    <span class="hljs-keyword">if</span> (d &lt; s) &#123;<br>        <span class="hljs-keyword">while</span> (n--)<br>            *d++ = *s++;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-comment">// 采用倒序拷贝</span><br>        <span class="hljs-type">char</span> *lasts = (<span class="hljs-type">char</span> *)s + (n - <span class="hljs-number">1</span>);<br>        <span class="hljs-type">char</span> *lastd = d + (n - <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">while</span> (n--)<br>            *lastd-- = *lasts--;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> dest;<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>注意<br>src和dest所指内存区域可以重叠，memmove可保证拷贝结果正确，而memcpy不能保证。函数返回指向dest的指针。<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span> </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;assert.h&gt;</span> </span><br><br><span class="hljs-comment">//模拟memcpy函数实现</span><br><span class="hljs-type">void</span>  *  <span class="hljs-title function_">MyMemcpy</span><span class="hljs-params">(<span class="hljs-type">void</span> *dest, <span class="hljs-type">const</span> <span class="hljs-type">void</span> *source, <span class="hljs-type">size_t</span> count)</span><br>&#123;<br>   assert((<span class="hljs-literal">NULL</span> != dest) &amp;&amp; (<span class="hljs-literal">NULL</span> != source));<br>   <span class="hljs-type">char</span> *tmp_dest = (<span class="hljs-type">char</span> *)dest;<br>   <span class="hljs-type">char</span> *tmp_source = (<span class="hljs-type">char</span> *)source;<br>   <span class="hljs-keyword">while</span> (count--)<span class="hljs-comment">//不判断是否重叠区域拷贝</span><br>   *tmp_dest++ = *tmp_source++;<br>   <span class="hljs-keyword">return</span> dest;<br>&#125;<br><br><span class="hljs-comment">//模拟memmove函数实现</span><br><span class="hljs-type">void</span> * <span class="hljs-title function_">MyMemmove</span><span class="hljs-params">(<span class="hljs-type">void</span> *dest, <span class="hljs-type">const</span> <span class="hljs-type">void</span> *src, <span class="hljs-type">size_t</span> n)</span><br>&#123;<br>   <span class="hljs-type">char</span> temp[<span class="hljs-number">256</span>];<br>   <span class="hljs-type">int</span> i;<br>   <span class="hljs-type">char</span> *d =(<span class="hljs-type">char</span>*) dest;<br>   <span class="hljs-type">const</span> <span class="hljs-type">char</span> *s =(<span class="hljs-type">char</span> *) src;<br>   <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>   temp[i] = s[i];<br>   <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>   d[i] = temp[i];<br>   <span class="hljs-keyword">return</span> dest;<br>&#125;<br><br><span class="hljs-type">int</span>  <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-comment">//strcpy进行字符串拷贝  </span><br>   <span class="hljs-comment">//注意：  1. src字符串必须以&#x27;\0&#x27;结束，  2. dest内存大小必须&gt;=src</span><br>   <span class="hljs-type">char</span>  a[<span class="hljs-number">5</span>];<br>   <span class="hljs-comment">//char  b[5] = &quot;ABC&quot;;//字符串结尾会自动的有\0 , 此处 b[4]就是&#x27;\0&#x27; </span><br>   <span class="hljs-type">char</span>  b[<span class="hljs-number">5</span>];<br>   b[<span class="hljs-number">0</span>] = <span class="hljs-string">&#x27;A&#x27;</span>;<br>   b[<span class="hljs-number">1</span>] = <span class="hljs-string">&#x27;B&#x27;</span>;<br>   b[<span class="hljs-number">2</span>] = <span class="hljs-string">&#x27;C&#x27;</span>;<br>   b[<span class="hljs-number">3</span>] = <span class="hljs-string">&#x27;\0&#x27;</span>;<span class="hljs-comment">//必须加\0，否则strcpy一直向后寻找\0</span><br>   <span class="hljs-built_in">strcpy</span>(a, b);<br>   <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>, a);<br><br>   <span class="hljs-comment">//memcpy函数， 直接拷贝内存空间，指定拷贝的大小</span><br>   <span class="hljs-type">int</span>   a2[<span class="hljs-number">5</span>];<br>   <span class="hljs-type">int</span>   b2[<span class="hljs-number">5</span>] = &#123; <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span> &#125;;<span class="hljs-comment">//不需要&#x27;\0&#x27;结束</span><br>   <span class="hljs-built_in">memcpy</span>(a2, b2,   <span class="hljs-number">3</span> *<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>)   );<span class="hljs-comment">//指定拷贝的大小, 单位  字节数</span><br>   <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d , %d  ,%d\n&quot;</span> , a2[<span class="hljs-number">0</span>] ,  a2[<span class="hljs-number">1</span>],  a2[<span class="hljs-number">2</span>]);<br><br>   MyMemcpy(a2 + <span class="hljs-number">3</span>, b2 + <span class="hljs-number">3</span>,   <span class="hljs-number">2</span> * <span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>));<br>   <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d , %d \n&quot;</span>, a2[<span class="hljs-number">3</span>], a2[<span class="hljs-number">4</span>]);<br><br>   <span class="hljs-comment">//演示内存重叠的情况</span><br>   <span class="hljs-type">char</span>  a3[<span class="hljs-number">6</span>] = <span class="hljs-string">&quot;123&quot;</span>;<br>   <span class="hljs-comment">//MyMemcpy(a3 + 1, a3, 4); //得到11111</span><br>   <span class="hljs-built_in">memcpy</span>(a3 + <span class="hljs-number">1</span>, a3, <span class="hljs-number">4</span>);<span class="hljs-comment">//虽然它是正确的，但是不保证，重叠拷贝应该避免使用它</span><br>   <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>, a3);<br><br>   <span class="hljs-comment">//memmove功能与memcpy一样，但是了考虑了重叠拷贝的问题，可以保证正确</span><br>   <span class="hljs-type">char</span>  a4[<span class="hljs-number">6</span>] = <span class="hljs-string">&quot;123&quot;</span>;<br>   <span class="hljs-comment">//MyMemmove(a4 + 1, a4, 4);//可以保证正确</span><br>   memmove(a4 + <span class="hljs-number">1</span>, a4, <span class="hljs-number">4</span>);<span class="hljs-comment">//可以保证正确</span><br>   <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>, a4);<br><br><br>   <span class="hljs-comment">//memset比较简单， 把内存区域初始化化为某个值</span><br>   <span class="hljs-type">char</span> a5[<span class="hljs-number">6</span>];<br>   <span class="hljs-built_in">memset</span>(a5, <span class="hljs-number">0</span>, <span class="hljs-number">6</span>);<br>   <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">6</span>; ++i)<br>   &#123;<br>   <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, a5[i]);<br>   &#125;<br><br>   <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h1 id="实现动态数组"><a href="#实现动态数组" class="headerlink" title="实现动态数组"></a>实现动态数组</h1><p>利用 realloc函数，当数组元素满的时候，扩充内存区域，然后加入元素！</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>E2PROM</title>
    <link href="/2023/07/03/E2PROM/"/>
    <url>/2023/07/03/E2PROM/</url>
    
    <content type="html"><![CDATA[<p>在STM32中使用IIC在E2PROM中读写</p><h1 id="首先是IIC读写操作"><a href="#首先是IIC读写操作" class="headerlink" title="首先是IIC读写操作"></a>首先是IIC读写操作</h1><ul><li>e2prom芯片(AT24CO2)电路原理图：<br><img src="/" alt="img"> </li><li>设备地址及读写指令</li><li>写一位数据图</li><li>读一位数据图</li><li>IIC开始与停止信号时序图</li><li>IIC传输数据的有效性图，SCL由低变高再变低，完成一位数据读写</li></ul><ol><li>主机从从机写入数据步骤<br>起始条件＋从设备地址＋写操作+应答信号+数据地址+应答+数据+应答+（连续n个）+停止条件</li><li>主机从从机读取数据<br>起始条件＋从设备地址＋写操作+应答信号+数据地址+应答+起始信号+从设备地址＋读操作+应答+（连续n个）+应答+停止条件</li></ol><h1 id="接下来代码实现"><a href="#接下来代码实现" class="headerlink" title="接下来代码实现"></a>接下来代码实现</h1><ul><li>根据芯片手册及资料STM32F103ZET6 SCL时钟线为GB6,SDA数据线为GB7</li><li>第一是写起始条件、终止条件、应答信号、写一个字节、读一个字节函数</li></ul><ol><li>起始SDA,SCL处于高电平起始条件先拉低SDA再拉低SCL</li><li>终止SDA，SCL处于低电平先拉高SCL，再拉高SDA</li><li></li><li>主机需要先释放SDA，释放SDA相当于切换输入模式<br>在SCL低电平时从机将数据放在SDA数据线上,SCL高电平时读取SDA,再拉低SCL<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">oIIC_start</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    IIC_SDA_OUT;<br>SDA_outH;<br>SCL_outH;<br>SDA_outL;<br>SCL_outL;<br>&#125;<br> <br><span class="hljs-type">void</span> <span class="hljs-title function_">oIIC_stop</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    IIC_SDA_OUT;<br>SCL_outL;<br>SDA_outL;<br>SCL_outH;<br>SDA_outH;<br>&#125;<br> <br><span class="hljs-type">void</span> <span class="hljs-title function_">oIIC_ACK</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    SCL_outH;<br>SCL_outL;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">oIIC_Send_Byte</span><span class="hljs-params">(uchar shuju)</span><br>&#123;<br>uchar q,w;<br>IIC_SDA_OUT;<br><span class="hljs-keyword">for</span>(q=<span class="hljs-number">0</span>;q&lt;<span class="hljs-number">8</span>;q++)<br>&#123;<br>SCL_outL;<br>SDA_outL;<br>w=shuju&gt;&gt;<span class="hljs-number">7</span>;<br>shuju=shuju&lt;&lt;<span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span>(w==<span class="hljs-number">1</span>)<br>&#123;<br>SDA_outH;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>SDA_outL;<br>&#125;<br>SCL_outH;<br>SCL_outL;<br>&#125;<br>&#125;<br> <br>uchar <span class="hljs-title function_">oIIC_Read_Byte</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>uchar q,e=<span class="hljs-number">0</span>;<br>IIC_SDA_IN;<br><span class="hljs-keyword">for</span>(q=<span class="hljs-number">0</span>;q&lt;<span class="hljs-number">8</span>;q++)<br>&#123;<br>SCL_outL;<br>SCL_outH;<br><span class="hljs-keyword">if</span>(SDA_in)<br>&#123;<br>e=e|<span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span>(q&lt;<span class="hljs-number">7</span>)e=e&lt;&lt;<span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>e=e|<span class="hljs-number">0</span>;<br><span class="hljs-keyword">if</span>(q&lt;<span class="hljs-number">7</span>)e=e&lt;&lt;<span class="hljs-number">1</span>;<br>&#125;<br>SCL_outL;<br>&#125;<br><span class="hljs-keyword">return</span> e;<br>&#125;<br><br></code></pre></td></tr></table></figure></li></ol><h1 id="接着是在E2PROM中写数据和读取数据"><a href="#接着是在E2PROM中写数据和读取数据" class="headerlink" title="接着是在E2PROM中写数据和读取数据"></a>接着是在E2PROM中写数据和读取数据</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stm32f10x.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;eeprom.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;iic.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;delay.h&quot;</span></span><br> <br><span class="hljs-type">void</span> <span class="hljs-title function_">eeprom_init</span><span class="hljs-params">()</span><br>&#123;<br>oIIC_init();<br>&#125;<br> <br><span class="hljs-type">void</span> <span class="hljs-title function_">EEPROM_weite_Byte</span><span class="hljs-params">(uchar a,uchar shuju)</span><br>&#123;<br>oIIC_start();<br>oIIC_Send_Byte(<span class="hljs-number">0xA0</span>);<span class="hljs-comment">//写从机地址</span><br>oIIC_ACK();     <span class="hljs-comment">//从机响应</span><br>oIIC_Send_Byte(a);<span class="hljs-comment">//写存数据的地址</span><br>oIIC_ACK();      <span class="hljs-comment">//响应</span><br>oIIC_Send_Byte(shuju);<br>oIIC_ACK();      <span class="hljs-comment">//响应</span><br>oIIC_stop();<br>delay_ms(<span class="hljs-number">10</span>);<br>&#125;<br> <br><span class="hljs-type">void</span> <span class="hljs-title function_">EEPROM_Write_AAL</span><span class="hljs-params">(uchar a,uchar b,uchar q[])</span><br>&#123;<br><span class="hljs-keyword">while</span>(b--)<br>&#123;<br>EEPROM_weite_Byte(a,q[a]);<br>a++;<br>  &#125;<br>&#125;<br> <br>uchar <span class="hljs-title function_">EEPROM_read_Byte</span><span class="hljs-params">(uchar a)</span><br>&#123;<br>uchar gg=<span class="hljs-number">0</span>;<br>    oIIC_start();<br>oIIC_Send_Byte(<span class="hljs-number">0xA0</span>);<br>oIIC_ACK();                         <span class="hljs-comment">//响应</span><br>oIIC_Send_Byte(a);<br>oIIC_ACK();                         <span class="hljs-comment">//响应</span><br>oIIC_start();<br>oIIC_Send_Byte(<span class="hljs-number">0xA1</span>);<br>oIIC_ACK();                         <span class="hljs-comment">//响应</span><br>    gg=oIIC_Read_Byte();<br>oIIC_ACK();                         <span class="hljs-comment">//响应</span><br>oIIC_stop();<br><span class="hljs-keyword">return</span> gg;<br>&#125;<br> <br><span class="hljs-type">void</span> <span class="hljs-title function_">EEPROM_read_ALL</span><span class="hljs-params">(uchar a,uchar b,uchar q[])</span><br>&#123;<br><span class="hljs-keyword">while</span>(b--)<br>&#123;<br>       q[a]=EEPROM_read_Byte(a);<br>   a++;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>杂草识别</title>
    <link href="/2023/06/25/%E6%9D%82%E8%8D%89%E8%AF%86%E5%88%AB/"/>
    <url>/2023/06/25/%E6%9D%82%E8%8D%89%E8%AF%86%E5%88%AB/</url>
    
    <content type="html"><![CDATA[<p>本次任务是在第五周手写识别的基础上完成上一周10类杂草的识别，实现方式都一样，通过神经网络（CNN模型）来完成识别<br>首先是制作10类杂草的数据集<br>第一步在获取了500张以上的杂草后，由于每张杂草图片大小都不一样，还有一些图片上不是我们训练中所需要的部分，所以为了获取我们所感兴趣的部分我们需要python中的pillow来裁剪这些图片，制作数据集。<br>第一步:在图上估计获取感兴趣区域的大小  </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#裁剪窗口</span><br>BOX_LEFT, BOX_UP, BOX_RIGHT, BOX_DOWN = <span class="hljs-number">100</span>, <span class="hljs-number">100</span>, <span class="hljs-number">400</span>, <span class="hljs-number">400</span><br>box = (BOX_LEFT, BOX_UP, BOX_RIGHT + BOX_LEFT, BOX_DOWN + BOX_UP)<br><span class="hljs-comment">#裁剪函数</span><br>roi_area = img.crop(box)<br></code></pre></td></tr></table></figure><p><img src="/img/%E6%9D%82%E8%8D%89%E8%AF%86%E5%88%AB1.png" alt="img"><br>下一步就是制作数据集<br>分为测试集，训练集，验证集，训练集和验证集都放着10类杂草的图片，测试集放着训练完后预测的图片<br><img src="/img/%E6%9D%82%E8%8D%89%E8%AF%86%E5%88%AB2.png" alt="img"><br><img src="/img/%E6%9D%82%E8%8D%89%E8%AF%86%E5%88%AB3.png" alt="img"><br>完成数据集的准备后，接下来是输入数据集，使用train_generator &#x3D; train_datagen.flow_from_directory(train_directory,target_size&#x3D;image_size,batch_size&#x3D;batch_size,class_mode&#x3D;’categorical’)生成数据。<br>接下来与第五周一样，创建CNN训练模型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">model_load</span>(<span class="hljs-params">IMG_SHAPE=(<span class="hljs-params"><span class="hljs-number">224</span>, <span class="hljs-number">224</span>, <span class="hljs-number">3</span></span>), class_num=<span class="hljs-number">12</span></span>):<br>    <span class="hljs-comment"># 搭建模型</span><br>    model = tf.keras.models.Sequential([<br>        <span class="hljs-comment"># 对模型做归一化的处理，将0-255之间的数字统一处理到0到1之间</span><br>        tf.keras.layers.experimental.preprocessing.Rescaling(<span class="hljs-number">1.</span> / <span class="hljs-number">255</span>, input_shape=IMG_SHAPE),<br>        <span class="hljs-comment"># 卷积层，该卷积层的输出为32个通道，卷积核的大小是3*3，激活函数为relu</span><br>        tf.keras.layers.Conv2D(<span class="hljs-number">32</span>, (<span class="hljs-number">3</span>, <span class="hljs-number">3</span>), activation=<span class="hljs-string">&#x27;relu&#x27;</span>),<br>        <span class="hljs-comment"># 添加池化层，池化的kernel大小是2*2</span><br>        tf.keras.layers.MaxPooling2D(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>),<br>        <span class="hljs-comment"># Add another convolution</span><br>        <span class="hljs-comment"># 卷积层，输出为64个通道，卷积核大小为3*3，激活函数为relu</span><br>        tf.keras.layers.Conv2D(<span class="hljs-number">64</span>, (<span class="hljs-number">3</span>, <span class="hljs-number">3</span>), activation=<span class="hljs-string">&#x27;relu&#x27;</span>),<br>        <span class="hljs-comment"># 池化层，最大池化，对2*2的区域进行池化操作</span><br>        tf.keras.layers.MaxPooling2D(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>),<br>        <span class="hljs-comment"># 将二维的输出转化为一维</span><br>        tf.keras.layers.Flatten(),<br>        <span class="hljs-comment"># The same 128 dense layers, and 10 output layers as in the pre-convolution example:</span><br>        tf.keras.layers.Dense(<span class="hljs-number">128</span>, activation=<span class="hljs-string">&#x27;relu&#x27;</span>),<br>        <span class="hljs-comment"># 通过softmax函数将模型输出为类名长度的神经元上，激活函数采用softmax对应概率值</span><br>        tf.keras.layers.Dense(class_num, activation=<span class="hljs-string">&#x27;softmax&#x27;</span>)<br>    ])<br>    <span class="hljs-comment"># 输出模型信息</span><br>    model.summary()<br>    <span class="hljs-comment"># 指明模型的训练参数，优化器为sgd优化器，损失函数为交叉熵损失函数</span><br>    model.<span class="hljs-built_in">compile</span>(optimizer=<span class="hljs-string">&#x27;sgd&#x27;</span>, loss=<span class="hljs-string">&#x27;categorical_crossentropy&#x27;</span>, metrics=[<span class="hljs-string">&#x27;accuracy&#x27;</span>])<br>    <span class="hljs-comment"># 返回模型</span><br>    <span class="hljs-keyword">return</span> model<br>```  <br>用model.fit()方法开始训练  <br>训练结果如下所示:  <br>![img](/img/杂草识别<span class="hljs-number">4.</span>png)  <br>准确度到达<span class="hljs-number">0.93</span>  <br>![img](/img/杂草识别<span class="hljs-number">5.</span>png)  <br>![img](/img/杂草识别<span class="hljs-number">6.</span>png)  <br>接下来是对利用训练好的模型对测试集中的<span class="hljs-number">10</span>类杂草图片进行预测<br>代码如下  <br>```python<br>predictions = model.predict(test_image)<br>class_names = [<span class="hljs-string">&#x27;Clinopodium polycephalum&#x27;</span>, <span class="hljs-string">&#x27;Duchesnea indica&#x27;</span>, <span class="hljs-string">&#x27;Eleusine indica&#x27;</span>, <span class="hljs-string">&#x27;Equisetum ramosissimum&#x27;</span>, <span class="hljs-string">&#x27;Lamium amplexicaule&#x27;</span>, <span class="hljs-string">&#x27;Phragmites australis&#x27;</span>, <span class="hljs-string">&#x27;Setaria viridis&#x27;</span>, <span class="hljs-string">&#x27;Taraxacum mongolicum&#x27;</span>, <span class="hljs-string">&#x27;Typha orientalis&#x27;</span>, <span class="hljs-string">&#x27;Xanthium strumarium&#x27;</span>] <span class="hljs-comment"># 类别名称</span><br>predicted_class = class_names[<span class="hljs-built_in">int</span>(predictions[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>])]<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;这个杂草是: <span class="hljs-subst">&#123;predicted_class&#125;</span>&quot;</span>)<br><br></code></pre></td></tr></table></figure><p>结果如下:<br><img src="/img/%E6%9D%82%E8%8D%89%E8%AF%86%E5%88%AB7.png" alt="img"><br><img src="/img/%E6%9D%82%E8%8D%89%E8%AF%86%E5%88%AB8.png" alt="img"><br><img src="/img/%E6%9D%82%E8%8D%89%E8%AF%86%E5%88%AB9.png" alt="img"><br><img src="/img/%E6%9D%82%E8%8D%89%E8%AF%86%E5%88%AB10.png" alt="img"><br><img src="/img/%E6%9D%82%E8%8D%89%E8%AF%86%E5%88%AB11.png" alt="img"><br><img src="/img/%E6%9D%82%E8%8D%89%E8%AF%86%E5%88%AB12.png" alt="img"><br><img src="/img/%E6%9D%82%E8%8D%89%E8%AF%86%E5%88%AB13.png" alt="img"><br><img src="/img/%E6%9D%82%E8%8D%89%E8%AF%86%E5%88%AB14.png" alt="img"><br><img src="/img/%E6%9D%82%E8%8D%89%E8%AF%86%E5%88%AB15.png" alt="img"><br><img src="/img/%E6%9D%82%E8%8D%89%E8%AF%86%E5%88%AB16.png" alt="img"><br><img src="/img/%E6%9D%82%E8%8D%89%E8%AF%86%E5%88%AB17.png" alt="img"><br><img src="/img/%E6%9D%82%E8%8D%89%E8%AF%86%E5%88%AB18.png" alt="img"><br><img src="/img/%E6%9D%82%E8%8D%89%E8%AF%86%E5%88%AB19.png" alt="img">  </p><p>以上就是全部内容 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> tensorflow <span class="hljs-keyword">as</span> tf<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> *<br><br><br><span class="hljs-comment"># 数据集加载函数，指明数据集的位置并统一处理为imgheight*imgwidth的大小，同时设置batch</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">data_load</span>(<span class="hljs-params">data_dir, test_data_dir, img_height, img_width, batch_size</span>):<br>    <span class="hljs-comment"># 加载训练集</span><br>    train_ds = tf.keras.preprocessing.image_dataset_from_directory(<br>        data_dir,<br>        label_mode=<span class="hljs-string">&#x27;categorical&#x27;</span>,<br>        seed=<span class="hljs-number">123</span>,<br>        image_size=(img_height, img_width),<br>        batch_size=batch_size)<br>    <span class="hljs-comment"># 加载测试集</span><br>    val_ds = tf.keras.preprocessing.image_dataset_from_directory(<br>        test_data_dir,<br>        label_mode=<span class="hljs-string">&#x27;categorical&#x27;</span>,<br>        seed=<span class="hljs-number">123</span>,<br>        image_size=(img_height, img_width),<br>        batch_size=batch_size)<br>    class_names = train_ds.class_names<br>    <span class="hljs-comment"># 返回处理之后的训练集、验证集和类名</span><br>    <span class="hljs-keyword">return</span> train_ds, val_ds, class_names<br><br><br><span class="hljs-comment"># 构建CNN模型</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">model_load</span>(<span class="hljs-params">IMG_SHAPE=(<span class="hljs-params"><span class="hljs-number">224</span>, <span class="hljs-number">224</span>, <span class="hljs-number">3</span></span>), class_num=<span class="hljs-number">12</span></span>):<br>    <span class="hljs-comment"># 搭建模型</span><br>    model = tf.keras.models.Sequential([<br>        <span class="hljs-comment"># 对模型做归一化的处理，将0-255之间的数字统一处理到0到1之间</span><br>        tf.keras.layers.experimental.preprocessing.Rescaling(<span class="hljs-number">1.</span> / <span class="hljs-number">255</span>, input_shape=IMG_SHAPE),<br>        <span class="hljs-comment"># 卷积层，该卷积层的输出为32个通道，卷积核的大小是3*3，激活函数为relu</span><br>        tf.keras.layers.Conv2D(<span class="hljs-number">32</span>, (<span class="hljs-number">3</span>, <span class="hljs-number">3</span>), activation=<span class="hljs-string">&#x27;relu&#x27;</span>),<br>        <span class="hljs-comment"># 添加池化层，池化的kernel大小是2*2</span><br>        tf.keras.layers.MaxPooling2D(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>),<br>        <span class="hljs-comment"># Add another convolution</span><br>        <span class="hljs-comment"># 卷积层，输出为64个通道，卷积核大小为3*3，激活函数为relu</span><br>        tf.keras.layers.Conv2D(<span class="hljs-number">64</span>, (<span class="hljs-number">3</span>, <span class="hljs-number">3</span>), activation=<span class="hljs-string">&#x27;relu&#x27;</span>),<br>        <span class="hljs-comment"># 池化层，最大池化，对2*2的区域进行池化操作</span><br>        tf.keras.layers.MaxPooling2D(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>),<br>        <span class="hljs-comment"># 将二维的输出转化为一维</span><br>        tf.keras.layers.Flatten(),<br>        <span class="hljs-comment"># The same 128 dense layers, and 10 output layers as in the pre-convolution example:</span><br>        tf.keras.layers.Dense(<span class="hljs-number">128</span>, activation=<span class="hljs-string">&#x27;relu&#x27;</span>),<br>        <span class="hljs-comment"># 通过softmax函数将模型输出为类名长度的神经元上，激活函数采用softmax对应概率值</span><br>        tf.keras.layers.Dense(class_num, activation=<span class="hljs-string">&#x27;softmax&#x27;</span>)<br>    ])<br>    <span class="hljs-comment"># 输出模型信息</span><br>    model.summary()<br>    <span class="hljs-comment"># 指明模型的训练参数，优化器为sgd优化器，损失函数为交叉熵损失函数</span><br>    model.<span class="hljs-built_in">compile</span>(optimizer=<span class="hljs-string">&#x27;sgd&#x27;</span>, loss=<span class="hljs-string">&#x27;categorical_crossentropy&#x27;</span>, metrics=[<span class="hljs-string">&#x27;accuracy&#x27;</span>])<br>    <span class="hljs-comment"># 返回模型</span><br>    <span class="hljs-keyword">return</span> model<br><br><br><span class="hljs-comment"># 展示训练过程的曲线</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show_loss_acc</span>(<span class="hljs-params">history</span>):<br>    <span class="hljs-comment"># 从history中提取模型训练集和验证集准确率信息和误差信息</span><br>    acc = history.history[<span class="hljs-string">&#x27;accuracy&#x27;</span>]<br>    val_acc = history.history[<span class="hljs-string">&#x27;val_accuracy&#x27;</span>]<br>    loss = history.history[<span class="hljs-string">&#x27;loss&#x27;</span>]<br>    val_loss = history.history[<span class="hljs-string">&#x27;val_loss&#x27;</span>]<br><br>    <span class="hljs-comment"># 按照上下结构将图画输出</span><br>    plt.figure(figsize=(<span class="hljs-number">8</span>, <span class="hljs-number">8</span>))<br>    plt.subplot(<span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>)<br>    plt.plot(acc, label=<span class="hljs-string">&#x27;Training Accuracy&#x27;</span>)<br>    plt.plot(val_acc, label=<span class="hljs-string">&#x27;Validation Accuracy&#x27;</span>)<br>    plt.legend(loc=<span class="hljs-string">&#x27;lower right&#x27;</span>)<br>    plt.ylabel(<span class="hljs-string">&#x27;Accuracy&#x27;</span>)<br>    plt.ylim([<span class="hljs-built_in">min</span>(plt.ylim()), <span class="hljs-number">1</span>])<br>    plt.title(<span class="hljs-string">&#x27;Training and Validation Accuracy&#x27;</span>)<br><br>    plt.subplot(<span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>)<br>    plt.plot(loss, label=<span class="hljs-string">&#x27;Training Loss&#x27;</span>)<br>    plt.plot(val_loss, label=<span class="hljs-string">&#x27;Validation Loss&#x27;</span>)<br>    plt.legend(loc=<span class="hljs-string">&#x27;upper right&#x27;</span>)<br>    plt.ylabel(<span class="hljs-string">&#x27;Cross Entropy&#x27;</span>)<br>    plt.title(<span class="hljs-string">&#x27;Training and Validation Loss&#x27;</span>)<br>    plt.xlabel(<span class="hljs-string">&#x27;epoch&#x27;</span>)<br>    plt.savefig(<span class="hljs-string">&#x27;results/results_cnn.png&#x27;</span>, dpi=<span class="hljs-number">100</span>)<br>    plt.show()<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">train</span>(<span class="hljs-params">epochs</span>):<br>    <span class="hljs-comment"># 开始训练，记录开始时间</span><br>    begin_time = time()<br>    <span class="hljs-comment"># todo 加载数据集， 修改为你的数据集的路径</span><br>    train_ds, val_ds, class_names = data_load(<span class="hljs-string">&quot;D:/imagelearning/rank grass/new_weeds_data/train&quot;</span>,<br>                                              <span class="hljs-string">&quot;D:/imagelearning/rank grass/new_weeds_data/val&quot;</span>, <span class="hljs-number">224</span>, <span class="hljs-number">224</span>, <span class="hljs-number">16</span>)<br>    <span class="hljs-built_in">print</span>(class_names)<br>    <span class="hljs-comment"># 加载模型</span><br>    model = model_load(class_num=<span class="hljs-built_in">len</span>(class_names))<br>    <span class="hljs-comment"># 指明训练的轮数epoch，开始训练</span><br>    history = model.fit(train_ds, validation_data=val_ds, epochs=epochs)<br>    <span class="hljs-comment"># todo 保存模型， 修改为你要保存的模型的名称</span><br>    model.save(<span class="hljs-string">&quot;models/cnn_fv1.h5&quot;</span>)<br>    <span class="hljs-comment"># 记录结束时间</span><br>    end_time = time()<br>    run_time = end_time - begin_time<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;该循环程序运行时间：&#x27;</span>, run_time, <span class="hljs-string">&quot;s&quot;</span>)  <span class="hljs-comment"># 该循环程序运行时间： 1.4201874732</span><br>    <span class="hljs-comment"># 绘制模型训练过程图</span><br>    show_loss_acc(history)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    train(epochs=<span class="hljs-number">30</span>)<br></code></pre></td></tr></table></figure><p>预测完整代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> tensorflow <span class="hljs-keyword">as</span> tf<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-comment"># 加载并准备训练集和测试集数据</span><br>train_directory = <span class="hljs-string">&#x27;D:/imagelearning/rank grass/new_weeds_data/train&#x27;</span><br>test_directory = <span class="hljs-string">&#x27;D:/imagelearning/rank grass/new_weeds_data/val&#x27;</span><br>image_size = (<span class="hljs-number">224</span>, <span class="hljs-number">224</span>)<br>batch_size = <span class="hljs-number">32</span><br><span class="hljs-comment"># 创建训练集的数据生成器</span><br>train_datagen = tf.keras.preprocessing.image.ImageDataGenerator(rescale=<span class="hljs-number">1.</span>/<span class="hljs-number">255</span>)<br>train_generator = train_datagen.flow_from_directory(<br>    train_directory,<br>    target_size=image_size,<br>    batch_size=batch_size,<br>    class_mode=<span class="hljs-string">&#x27;categorical&#x27;</span><br>)<br><span class="hljs-comment"># 创建测试集的数据生成器:</span><br>test_datagen = tf.keras.preprocessing.image.ImageDataGenerator(rescale=<span class="hljs-number">1.</span>/<span class="hljs-number">255</span>)<br>test_generator = test_datagen.flow_from_directory(<br>    test_directory,<br>    target_size=image_size,<br>    batch_size=batch_size,<br>    class_mode=<span class="hljs-string">&#x27;categorical&#x27;</span><br>)<br><span class="hljs-comment"># 打印准备完成的消息</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;准备完成&quot;</span>)<br><br><span class="hljs-comment"># 定义CNN模型</span><br>model = tf.keras.Sequential([<br>    tf.keras.layers.Conv2D(<span class="hljs-number">32</span>, (<span class="hljs-number">3</span>, <span class="hljs-number">3</span>), activation=<span class="hljs-string">&#x27;relu&#x27;</span>, input_shape=(<span class="hljs-number">224</span>, <span class="hljs-number">224</span>, <span class="hljs-number">3</span>)),<br>    tf.keras.layers.MaxPooling2D((<span class="hljs-number">2</span>, <span class="hljs-number">2</span>)),<br>    tf.keras.layers.Conv2D(<span class="hljs-number">64</span>, (<span class="hljs-number">3</span>, <span class="hljs-number">3</span>), activation=<span class="hljs-string">&#x27;relu&#x27;</span>),<br>    tf.keras.layers.MaxPooling2D((<span class="hljs-number">2</span>, <span class="hljs-number">2</span>)),<br>    tf.keras.layers.Conv2D(<span class="hljs-number">128</span>, (<span class="hljs-number">3</span>, <span class="hljs-number">3</span>), activation=<span class="hljs-string">&#x27;relu&#x27;</span>),<br>    tf.keras.layers.MaxPooling2D((<span class="hljs-number">2</span>, <span class="hljs-number">2</span>)),<br>    tf.keras.layers.Flatten(),<br>    tf.keras.layers.Dense(<span class="hljs-number">128</span>, activation=<span class="hljs-string">&#x27;relu&#x27;</span>),<br>    tf.keras.layers.Dense(<span class="hljs-number">10</span>, activation=<span class="hljs-string">&#x27;softmax&#x27;</span>)<br>])<br><br><span class="hljs-comment"># 编译模型</span><br>model.<span class="hljs-built_in">compile</span>(optimizer=<span class="hljs-string">&#x27;sgd&#x27;</span>,<br>              loss=<span class="hljs-string">&#x27;categorical_crossentropy&#x27;</span>,<br>              metrics=[<span class="hljs-string">&#x27;accuracy&#x27;</span>])<br><br><span class="hljs-comment"># 训练模型</span><br>history = model.fit(<br>    train_generator,<br>    epochs=<span class="hljs-number">30</span>,<br>    validation_data=test_generator<br>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;结束训练&quot;</span>)<br>validation_loss, validation_accuracy = model.evaluate(test_generator)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Validation Loss: <span class="hljs-subst">&#123;validation_loss:<span class="hljs-number">.4</span>f&#125;</span>&quot;</span>)<span class="hljs-comment">#使用测试集数据生成器对模型进行评估，返回验证集的损失和准确率。</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Validation Accuracy: <span class="hljs-subst">&#123;validation_accuracy:<span class="hljs-number">.4</span>f&#125;</span>&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;评估结束&quot;</span>)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;结束训练&quot;</span>)<br><span class="hljs-comment"># 绘制训练和验证的损失曲线</span><br>plt.plot(history.history[<span class="hljs-string">&#x27;loss&#x27;</span>],<br>         label=<span class="hljs-string">&#x27;Training Loss&#x27;</span>)<br>plt.plot(history.history[<span class="hljs-string">&#x27;val_loss&#x27;</span>],<br>         label=<span class="hljs-string">&#x27;Validation Loss&#x27;</span>)<br>plt.title(<span class="hljs-string">&#x27;Loss&#x27;</span>)<br>plt.xlabel(<span class="hljs-string">&#x27;Epoch&#x27;</span>)<br>plt.ylabel(<span class="hljs-string">&#x27;Loss&#x27;</span>)<br>plt.legend()<br>plt.show()<br><br><span class="hljs-comment"># 绘制训练和验证的准确率曲线</span><br>plt.plot(history.history[<span class="hljs-string">&#x27;accuracy&#x27;</span>], label=<span class="hljs-string">&#x27;Training Accuracy&#x27;</span>)<br>plt.plot(history.history[<span class="hljs-string">&#x27;val_accuracy&#x27;</span>], label=<span class="hljs-string">&#x27;Validation Accuracy&#x27;</span>)<br>plt.title(<span class="hljs-string">&#x27;Accuracy&#x27;</span>)<br>plt.xlabel(<span class="hljs-string">&#x27;Epoch&#x27;</span>)<br>plt.ylabel(<span class="hljs-string">&#x27;Accuracy&#x27;</span>)<br>plt.legend()<br>plt.show()<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;训练和绘图完成&quot;</span>)<br><br><br>test_image_path = <span class="hljs-string">&#x27;D:/imagelearning/rank grass/new_weeds_data/val/Duchesnea indica/1.jpg&#x27;</span><br>test_image = tf.keras.preprocessing.image.load_img(test_image_path, target_size=(<span class="hljs-number">224</span>, <span class="hljs-number">224</span>))<br>test_image = tf.keras.preprocessing.image.img_to_array(test_image)<br>test_image = test_image / <span class="hljs-number">255.0</span>  <span class="hljs-comment"># 归一化像素值</span><br><br><span class="hljs-comment"># 将图像转换为批次数据</span><br>test_image = tf.expand_dims(test_image, axis=<span class="hljs-number">0</span>)<br><br>predictions = model.predict(test_image)<br>class_names = [<span class="hljs-string">&#x27;Clinopodium polycephalum&#x27;</span>, <span class="hljs-string">&#x27;Duchesnea indica&#x27;</span>, <span class="hljs-string">&#x27;Eleusine indica&#x27;</span>, <span class="hljs-string">&#x27;Equisetum ramosissimum&#x27;</span>, <span class="hljs-string">&#x27;Lamium amplexicaule&#x27;</span>, <span class="hljs-string">&#x27;Phragmites australis&#x27;</span>, <span class="hljs-string">&#x27;Setaria viridis&#x27;</span>, <span class="hljs-string">&#x27;Taraxacum mongolicum&#x27;</span>, <span class="hljs-string">&#x27;Typha orientalis&#x27;</span>, <span class="hljs-string">&#x27;Xanthium strumarium&#x27;</span>] <span class="hljs-comment"># 类别名称</span><br>predicted_class = class_names[<span class="hljs-built_in">int</span>(predictions[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>])]<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;这个杂草是: <span class="hljs-subst">&#123;predicted_class&#125;</span>&quot;</span>)<br><br><span class="hljs-comment"># 显示加载的图像</span><br>image = plt.imread(test_image_path)<br>plt.imshow(image)<br>plt.title(<span class="hljs-string">f&quot;Predicted Class: <span class="hljs-subst">&#123;predicted_class&#125;</span>&quot;</span>)<br>plt.axis(<span class="hljs-string">&#x27;off&#x27;</span>)<br>plt.show()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;准备保存模型&quot;</span>)<br>model.save(<span class="hljs-string">&#x27;test.h5&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;完成&quot;</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>爬虫爬取图片</title>
    <link href="/2023/06/25/%E7%88%AC%E8%99%AB%E7%88%AC%E5%8F%96%E5%9B%BE%E7%89%87/"/>
    <url>/2023/06/25/%E7%88%AC%E8%99%AB%E7%88%AC%E5%8F%96%E5%9B%BE%E7%89%87/</url>
    
    <content type="html"><![CDATA[<p>本次任务是从网上爬取杂草图片<br>第一了解原理<br>本次实现是从百度图片上爬取<br>首先打开网页地址，F12打开开发者工具<br><img src="/img/%E7%88%AC%E8%99%AB1.png" alt="img"><br>由于每一张图片网站都对应着每一张图片，<br><img src="/img/%E7%88%AC%E8%99%AB2.png" alt="img"><br>现在的目的是获取这些图片网址。<br>本次任务是通过获取网页JSON文件来获取这些图片网址<br><img src="/img/%E7%88%AC%E8%99%AB3.png" alt="img"><br><img src="/img/%E7%88%AC%E8%99%AB4.png" alt="img"><br>其中thumbURL下的文本就是图片的地址<br>第二内容：<br>第一步是获取网址，通过访问网址来得到JSON信息<br><img src="/img/%E7%88%AC%E8%99%AB5.png" alt="img"><br>输出为:<br><img src="/img/%E7%88%AC%E8%99%AB6.png" alt="img"><br>由于是爬取500以上的图片得到这些网址后，访问网址用requests.get(url).json()方法来得到这些数据:<br>代码：<br><img src="/img/%E7%88%AC%E8%99%AB7.png" alt="img"><br>结果：<br><img src="/img/%E7%88%AC%E8%99%AB8.png" alt="img"><br>获取了这些图片网址,接下来就是保存这些图片<br>代码：<br><img src="/img/%E7%88%AC%E8%99%AB9.png" alt="img"><br>在已创建的文件目录下，用f.write()方法保存图片内容<br>以上就是整个过程<br>下面试爬取的杂草图片展示<br><img src="/img/%E7%88%AC%E8%99%AB10.png" alt="img"><br><img src="/img/%E7%88%AC%E8%99%AB11.png" alt="img"><br><img src="/img/%E7%88%AC%E8%99%AB12.png" alt="img"><br>其他种类杂草一样方法。以上就是这次任务全部内容。<br>完整代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> urllib<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">GetImage</span>():<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self,keyword=<span class="hljs-string">&#x27;鲜花&#x27;</span>,paginator=<span class="hljs-number">1</span></span>):<br>        self.url = <span class="hljs-string">&#x27;http://image.baidu.com/search/acjson?&#x27;</span><br><br>        self.headers = &#123;<br>            <span class="hljs-string">&#x27;User-Agent&#x27;</span>: <span class="hljs-string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/113.0.0.0 Safari/537.36 Edg/113.0.1774.42&#x27;</span><br>        &#125;<br><br>        self.keyword = keyword<br>        self.paginator = paginator<br><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_param</span>(<span class="hljs-params">self</span>):<br><br>        keyword = urllib.parse.quote(self.keyword)<br>        params = []<br><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,self.paginator+<span class="hljs-number">1</span>):<br><br>            params.append(<br>               <span class="hljs-string">&#x27;tn=resultjson_com&amp;logid=10338332981203604364&amp;ipn=rj&amp;ct=201326592&amp;is=&amp;fp=result&amp;fr=&amp;word=&#123;&#125;&amp;queryWord=&#123;&#125;&amp;cl=2&amp;lm=-1&amp;ie=utf-8&amp;oe=utf-8&amp;adpicid=&amp;st=&amp;z=&amp;ic=&amp;hd=&amp;latest=&amp;copyright=&amp;s=&amp;se=&amp;tab=&amp;width=&amp;height=&amp;face=&amp;istype=&amp;qc=&amp;nc=1&amp;expermode=&amp;nojc=&amp;isAsync=&amp;pn=&#123;&#125;&amp;rn=30&amp;gsm=78&amp;1650241802208=&#x27;</span>.<span class="hljs-built_in">format</span>(keyword,keyword,<span class="hljs-number">30</span>*i)<br><br>            )<br>        <span class="hljs-keyword">return</span> params<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_urls</span>(<span class="hljs-params">self,params</span>):<br>        urls = []<br>        <span class="hljs-keyword">for</span> param <span class="hljs-keyword">in</span> params:<br>            urls.append(self.url+param)<br>        <span class="hljs-keyword">return</span> urls<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_image_url</span>(<span class="hljs-params">self,urls</span>):<br>        image_url = []<br>        <span class="hljs-keyword">for</span> url <span class="hljs-keyword">in</span> urls:<br>            json_data = requests.get(url,headers = self.headers).json()<br>            json_data = json_data.get(<span class="hljs-string">&#x27;data&#x27;</span>)<br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> json_data:<br>                <span class="hljs-keyword">if</span> i:<br>                    image_url.append(i.get(<span class="hljs-string">&#x27;thumbURL&#x27;</span>))<br>        <span class="hljs-keyword">return</span> image_url<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_image</span>(<span class="hljs-params">self,image_url</span>):<br>        <span class="hljs-comment">##根据图片url，存入图片</span><br>        file_name = os.path.join(<span class="hljs-string">&quot;&quot;</span>, self.keyword)<br>        <span class="hljs-comment">#print(file_name)</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(file_name):<br>            os.makedirs(file_name)<br><br>        <span class="hljs-keyword">for</span> index,url <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(image_url,start=<span class="hljs-number">1</span>):<br>            <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(file_name+<span class="hljs-string">&#x27;/&#123;&#125;.jpg&#x27;</span>.<span class="hljs-built_in">format</span>(index),<span class="hljs-string">&#x27;wb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>                f.write(requests.get(url,headers=self.headers).content)<br><br>            <span class="hljs-keyword">if</span> index != <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> index%<span class="hljs-number">30</span> == <span class="hljs-number">0</span>:<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;第&#123;&#125;页下载完成&quot;</span>.<span class="hljs-built_in">format</span>(index/<span class="hljs-number">30</span>))<br><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__call__</span>(<span class="hljs-params">self, *args, **kwargs</span>):<br>        params = self.get_param()<br>        urls = self.get_urls(params)<br>        image_url = self.get_image_url(urls)<br>        self.get_image(image_url=image_url)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    spider = GetImage(<span class="hljs-string">&#x27;蛇莓&#x27;</span>,<span class="hljs-number">20</span>)<br>    spider()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>minist手写识别</title>
    <link href="/2023/06/25/minist%E6%89%8B%E5%86%99%E8%AF%86%E5%88%AB/"/>
    <url>/2023/06/25/minist%E6%89%8B%E5%86%99%E8%AF%86%E5%88%AB/</url>
    
    <content type="html"><![CDATA[<p>本次任务是用卷神经网络完成手写识别<br>内容:<br>首先是构建CNN模型<br>CNN模型有输入层，卷积层，激励层，池化层，全连接层，输出层<br>第一层卷积将输入的28，28，1的图片通过卷积核3<em>3，共32个的卷积核形成32张量<br>再通过池化层将原来由28</em>28通过卷积核的张量缩小一倍变成14<em>14</em>32<br>第二层卷积层的卷积核<br>将上一层的池化结果继续卷积，卷积核为3<em>3,64个，变为14</em>14<em>62<br>同样经过池化层变为14</em>14<em>64<br>再经过全连接层变为4</em>4<em>64最后输出层输出1024</em>1*1的张量<br>代码部分为:<br><img src="/img/%E6%89%8B%E5%86%991.png" alt="img"><br>可以通过model.summary来看到模型的结构<br><img src="/img/%E6%89%8B%E5%86%992.png" alt="img"><br>接下来是数据集的输入<br>通过的是dataset库函数来输入共有60000张训练集和10000张测试集<br>代码如下<br><img src="/img/%E6%89%8B%E5%86%993.png" alt="img"><br>再构建完模型和输入数据集后开始训练<br>训练后的模型参数将保存在.&#x2F;ckpt&#x2F;cp-0005.ckpt里<br><img src="/img/%E6%89%8B%E5%86%994.png" alt="img"><br>训练结果:<br><img src="/img/%E6%89%8B%E5%86%995.png" alt="img"><br>准确到达0.98<br>在训练完模型后对测试文件下的图片进行预测<br><img src="/img/%E6%89%8B%E5%86%996.png" alt="img"><br>代码部分首先是要加载训练好的模型，将模型权重输入<br><img src="/img/%E5%9B%BE%E7%89%8712.png" alt="img"><br>之后就是通过model.predict函数来预测<br><img src="/img/%E6%89%8B%E5%86%997.png" alt="img"><br>输入图片文件地址<br><img src="/img/%E6%89%8B%E5%86%998.png" alt="img"><br>预测结果为<br><img src="/img/%E6%89%8B%E5%86%999.png" alt="img"><br><img src="/img/%E6%89%8B%E5%86%9910.png" alt="img"><br>由结果可以看出在预测时，他会返回每个数字的可能性<br>[2.2452707e-07 3.6458367e-08 2.6482989e-09 8.6910489e-08 6.6781249e-06<br> 2.4170979e-06 6.4976060e-09 1.0569422e-06 1.5694044e-06 9.9998796e-01]<br>再通过np.argmax()就可以的出来最优可能的数字<br><img src="/img/%E6%89%8B%E5%86%9911.png" alt="img"><br>上面是用matplotlib来绘制的预测数字，红色代码预测结果<br>以上就是全部内容<br>完整训练代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> tensorflow <span class="hljs-keyword">as</span> tf<br><span class="hljs-keyword">from</span> tensorflow.keras <span class="hljs-keyword">import</span> datasets, layers, models<br><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">CNN</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        model = models.Sequential()<br>        <span class="hljs-comment"># 第1层卷积，卷积核大小为3*3，32个，28*28为待训练图片的大小</span><br>        model.add(layers.Conv2D(<span class="hljs-number">32</span>, (<span class="hljs-number">3</span>, <span class="hljs-number">3</span>), activation=<span class="hljs-string">&#x27;relu&#x27;</span>, input_shape=(<span class="hljs-number">28</span>, <span class="hljs-number">28</span>, <span class="hljs-number">1</span>)))<br>        model.add(layers.MaxPooling2D((<span class="hljs-number">2</span>, <span class="hljs-number">2</span>)))<br>        <span class="hljs-comment"># 第2层卷积，卷积核大小为3*3，64个</span><br>        model.add(layers.Conv2D(<span class="hljs-number">64</span>, (<span class="hljs-number">3</span>, <span class="hljs-number">3</span>), activation=<span class="hljs-string">&#x27;relu&#x27;</span>))<br>        model.add(layers.MaxPooling2D((<span class="hljs-number">2</span>, <span class="hljs-number">2</span>)))<br>        <span class="hljs-comment"># 第3层卷积，卷积核大小为3*3，64个</span><br>        model.add(layers.Conv2D(<span class="hljs-number">64</span>, (<span class="hljs-number">3</span>, <span class="hljs-number">3</span>), activation=<span class="hljs-string">&#x27;relu&#x27;</span>))<br><br>        model.add(layers.Flatten())<br>        model.add(layers.Dense(<span class="hljs-number">64</span>, activation=<span class="hljs-string">&#x27;relu&#x27;</span>))<br>        model.add(layers.Dense(<span class="hljs-number">10</span>, activation=<span class="hljs-string">&#x27;softmax&#x27;</span>))<br><br>        model.summary()<br><br>        self.model = model<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DataSource</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-comment"># mnist数据集存储的位置，如何不存在将自动下载</span><br>        <span class="hljs-comment">#data_path = os.path.abspath(os.path.dirname(__file__)) + &#x27;D:/imagelearning/CNN1/data_set_tf2/mnist.npz&#x27;</span><br>        data_path =<span class="hljs-string">&#x27;D:/imagelearning/CNN1/data_set_tf2/mnist.npz&#x27;</span><br>        (train_images, train_labels), (test_images, test_labels) = datasets.mnist.load_data(path=data_path)<br>        <span class="hljs-comment"># 6万张训练图片，1万张测试图片</span><br>        train_images = train_images.reshape((<span class="hljs-number">60000</span>, <span class="hljs-number">28</span>, <span class="hljs-number">28</span>, <span class="hljs-number">1</span>))<br>        test_images = test_images.reshape((<span class="hljs-number">10000</span>, <span class="hljs-number">28</span>, <span class="hljs-number">28</span>, <span class="hljs-number">1</span>))<br>        <span class="hljs-comment"># 像素值映射到 0 - 1 之间</span><br>        train_images, test_images = train_images / <span class="hljs-number">255.0</span>, test_images / <span class="hljs-number">255.0</span><br><br>        self.train_images, self.train_labels = train_images, train_labels<br>        self.test_images, self.test_labels = test_images, test_labels<br><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Train</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.cnn = CNN()<br>        self.data = DataSource()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">train</span>(<span class="hljs-params">self</span>):<br>        check_path = <span class="hljs-string">&#x27;./ckpt/cp-&#123;epoch:04d&#125;.ckpt&#x27;</span><br>        <span class="hljs-comment"># period 每隔5epoch保存一次</span><br>        save_model_cb = tf.keras.callbacks.ModelCheckpoint(check_path, save_weights_only=<span class="hljs-literal">True</span>, verbose=<span class="hljs-number">1</span>, period=<span class="hljs-number">5</span>)<br><br>        self.cnn.model.<span class="hljs-built_in">compile</span>(optimizer=<span class="hljs-string">&#x27;adam&#x27;</span>,<br>                               loss=<span class="hljs-string">&#x27;sparse_categorical_crossentropy&#x27;</span>,<br>                               metrics=[<span class="hljs-string">&#x27;accuracy&#x27;</span>])<br>        self.cnn.model.fit(self.data.train_images, self.data.train_labels, epochs=<span class="hljs-number">5</span>, callbacks=[save_model_cb])<br><br>        test_loss, test_acc = self.cnn.model.evaluate(self.data.test_images, self.data.test_labels)<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;准确率: %.4f，共测试了%d张图片 &quot;</span> % (test_acc, <span class="hljs-built_in">len</span>(self.data.test_labels)))<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    app = Train()<br>    app.train()<br></code></pre></td></tr></table></figure><p>完整预测代码:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> tensorflow <span class="hljs-keyword">as</span> tf<br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">from</span> tensorflow.keras <span class="hljs-keyword">import</span> datasets, layers, models<br><br><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">python 3.7</span><br><span class="hljs-string">tensorflow 2.0.0b0</span><br><span class="hljs-string">pillow(PIL) 4.3.0</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">CNN</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        model = models.Sequential()<br>        <span class="hljs-comment"># 第1层卷积，卷积核大小为3*3，32个，28*28为待训练图片的大小</span><br>        model.add(layers.Conv2D(<span class="hljs-number">32</span>, (<span class="hljs-number">3</span>, <span class="hljs-number">3</span>), activation=<span class="hljs-string">&#x27;relu&#x27;</span>, input_shape=(<span class="hljs-number">28</span>, <span class="hljs-number">28</span>, <span class="hljs-number">1</span>)))<br>        model.add(layers.MaxPooling2D((<span class="hljs-number">2</span>, <span class="hljs-number">2</span>)))<br>        <span class="hljs-comment"># 第2层卷积，卷积核大小为3*3，64个</span><br>        model.add(layers.Conv2D(<span class="hljs-number">64</span>, (<span class="hljs-number">3</span>, <span class="hljs-number">3</span>), activation=<span class="hljs-string">&#x27;relu&#x27;</span>))<br>        model.add(layers.MaxPooling2D((<span class="hljs-number">2</span>, <span class="hljs-number">2</span>)))<br>        <span class="hljs-comment"># 第3层卷积，卷积核大小为3*3，64个</span><br>        model.add(layers.Conv2D(<span class="hljs-number">64</span>, (<span class="hljs-number">3</span>, <span class="hljs-number">3</span>), activation=<span class="hljs-string">&#x27;relu&#x27;</span>))<br><br>        model.add(layers.Flatten())<br>        model.add(layers.Dense(<span class="hljs-number">64</span>, activation=<span class="hljs-string">&#x27;relu&#x27;</span>))<br>        model.add(layers.Dense(<span class="hljs-number">10</span>, activation=<span class="hljs-string">&#x27;softmax&#x27;</span>))<br><br>        model.summary()<br><br>        self.model = model<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Predict</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        latest = tf.train.latest_checkpoint(<span class="hljs-string">&#x27;./ckpt&#x27;</span>)<br>        self.cnn = CNN()<br>        self.cnn.model.load_weights(latest)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">predict</span>(<span class="hljs-params">self, image_path</span>):<br>        <span class="hljs-comment"># 以黑白方式读取图片</span><br>        img = Image.<span class="hljs-built_in">open</span>(image_path).convert(<span class="hljs-string">&#x27;L&#x27;</span>)<br>        img = np.reshape(img, (<span class="hljs-number">28</span>, <span class="hljs-number">28</span>, <span class="hljs-number">1</span>)) / <span class="hljs-number">255.</span><br>        x = np.array([<span class="hljs-number">1</span> - img])<br><br>        <span class="hljs-comment"># API refer: https://keras.io/models/model/</span><br>        y = self.cnn.model.predict(x)<br><br>        <span class="hljs-comment"># 因为x只传入了一张图片，取y[0]即可</span><br>        <span class="hljs-comment"># np.argmax()取得最大值的下标，即代表的数字</span><br>        <span class="hljs-built_in">print</span>(image_path)<br>        <span class="hljs-built_in">print</span>(y[<span class="hljs-number">0</span>])<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;        -&gt; Predict digit&#x27;</span>, np.argmax(y[<span class="hljs-number">0</span>]))<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    app = Predict()<br>    app.predict(<span class="hljs-string">&#x27;D:/imagelearning/CNN1/test_images/0.jpg&#x27;</span>)<br>    app.predict(<span class="hljs-string">&#x27;D:/imagelearning/CNN1/test_images/1.jpg&#x27;</span>)<br>    app.predict(<span class="hljs-string">&#x27;D:/imagelearning/CNN1/test_images/2.jpg&#x27;</span>)<br>    app.predict(<span class="hljs-string">&#x27;D:/imagelearning/CNN1/test_images/3.jpg&#x27;</span>)<br>    app.predict(<span class="hljs-string">&#x27;D:/imagelearning/CNN1/test_images/4.png&#x27;</span>)<br>    app.predict(<span class="hljs-string">&#x27;D:/imagelearning/CNN1/test_images/5.jpg&#x27;</span>)<br>    app.predict(<span class="hljs-string">&#x27;D:/imagelearning/CNN1/test_images/6.jpg&#x27;</span>)<br>    app.predict(<span class="hljs-string">&#x27;D:/imagelearning/CNN1/test_images/7.jpg&#x27;</span>)<br>    app.predict(<span class="hljs-string">&#x27;D:/imagelearning/CNN1/test_images/8.jpg&#x27;</span>)<br>    app.predict(<span class="hljs-string">&#x27;D:/imagelearning/CNN1/test_images/9.jpg&#x27;</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>尺寸检测</title>
    <link href="/2023/06/24/%E5%B0%BA%E5%AF%B8%E6%A3%80%E6%B5%8B/"/>
    <url>/2023/06/24/%E5%B0%BA%E5%AF%B8%E6%A3%80%E6%B5%8B/</url>
    
    <content type="html"><![CDATA[<p>本次实验是测量图像中的物体尺寸大小，完成本次实验的关键点是比率指标（pixels_per_metric）。比率指标是给定度量的像素数。为了获取pixels_per_metric，我们得需要找到一个参考物。得到参考物现实中的尺寸大小。从而pixels_per_metric&#x3D;pix(图像中的像素值)&#x2F;width(现实长度)，意为每width的长度有pix个像素，从而在得到其他被测物的像素值后除以pixels_per_metric&#x3D;pix便能测出其尺寸。</p><p>实现过程:</p><blockquote><ol><li>首先是将参考物的图片（用的是0.995英寸的美元）放在被测物的图片上合成一张新图<br><img src="/img/%E7%BE%8E%E5%85%83.png" alt="美元"><img src="/img/%E8%A2%AB%E6%B5%8B%E7%89%A9.png" alt="被测物"><br>合成结果:<br><img src="/img/%E8%A2%AB%E6%B5%8B%E7%89%A9.png" alt="合成图"><br>代码实现:</li></ol></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python">coin_img=cv2.imread(<span class="hljs-string">&quot;meiyuan1.jpg&quot;</span>,flags=<span class="hljs-number">1</span>)<br>img=cv2.imread(<span class="hljs-string">&quot;mea.jpg&quot;</span>,flags=<span class="hljs-number">1</span>)<br>coin_img=cv2.resize(coin_img,(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>),<span class="hljs-literal">None</span>,<span class="hljs-number">0.18</span>,<span class="hljs-number">0.18</span>)<br>img=cv2.resize(img,(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>),<span class="hljs-literal">None</span>,<span class="hljs-number">0.2</span>,<span class="hljs-number">0.2</span>)<br>h,w=img.shape[:<span class="hljs-number">2</span>]<br>h1,w1=coin_img.shape[:<span class="hljs-number">2</span>]<br><span class="hljs-comment">#合成图片</span><br>imageROI = np.ones((<span class="hljs-number">92</span>, <span class="hljs-number">94</span>, <span class="hljs-number">3</span>))<br>imageROI = coin_img[<span class="hljs-number">0</span>:<span class="hljs-number">92</span>, <span class="hljs-number">0</span>: <span class="hljs-number">94</span>]<br>img[<span class="hljs-number">10</span>:<span class="hljs-number">102</span>, <span class="hljs-number">10</span>:<span class="hljs-number">104</span>]=imageROI<br>cv2.imshow(<span class="hljs-string">&quot;img&quot;</span>,img)<br><br>cv2.waitKey(<span class="hljs-number">0</span>)<br>cv2.destroyAllWindows()<br></code></pre></td></tr></table></figure><blockquote><ol start="2"><li>接下来是对图像预处理：通过高斯滤波，canny边缘检测，腐蚀和膨胀来获得图像的边缘信息，方便下一步获取轮廓<br>**高斯模糊  <img src="/img/%E9%AB%98%E6%96%AF.png" alt="高斯"><br>**边缘检测<img src="/img/%E8%BE%B9%E7%BC%98.png" alt="边缘"><br>**腐蚀和膨胀<img src="/img/%E8%86%A8%E8%83%80%E5%92%8C%E8%85%90%E8%9A%80.png" alt="膨胀和腐蚀"><br>代码:</li></ol></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">photopretreatment</span>(<span class="hljs-params">image,SHOWerode=<span class="hljs-literal">False</span></span>):<br>    image=cv2.cvtColor(image,cv2.COLOR_BGR2GRAY)<br><br>    gaussian=cv2.GaussianBlur(image,(<span class="hljs-number">7</span>,<span class="hljs-number">7</span>),<span class="hljs-number">0</span>)<br>    <span class="hljs-comment">#cv2.imshow(&quot;g&quot;,gaussian)</span><br>    canny=cv2.Canny(gaussian,<span class="hljs-number">50</span>,<span class="hljs-number">100</span>)<br>    <span class="hljs-comment">#cv2.imshow(&quot;g&quot;,canny)</span><br>    dilate=cv2.dilate(canny,<span class="hljs-literal">None</span>,iterations=<span class="hljs-number">1</span>)<br>    erode = cv2.erode(dilate,<span class="hljs-literal">None</span>, iterations=<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">if</span> SHOWerode:cv2.imshow(<span class="hljs-string">&quot;erode&quot;</span>,erode)<br>    <span class="hljs-keyword">return</span> erode<br></code></pre></td></tr></table></figure><blockquote><ol start="3"><li>下一步是通过cv2.findcontours()函数得到轮廓点和轮廓个数与层次关系则需要imutils.grab_contours()函数来抓取其中的轮廓，接下来就需要对轮廓进行排序从上到下从左到右（使用contours.sort_contours()函数），因为我们需要先对参考物进行测量得到pixels_per_metric后再对被测物测量。</li></ol></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#找轮廓并排序</span><br>cnts=cv2.findContours(img1.copy(),cv2.RETR_EXTERNAL,cv2.CHAIN_APPROX_SIMPLE)<br>cnts=imutils.grab_contours(cnts)<span class="hljs-comment">#抓住轮廓</span><br>(cnts,_)=contours.sort_contours(cnts)<span class="hljs-comment">#轮廓排序</span><br><br><span class="hljs-comment">#定义pixpermectic</span><br>pixelsPerMetric = <span class="hljs-literal">None</span><br>width = <span class="hljs-number">0.955</span><br>```  <br><br>&gt; <span class="hljs-number">4.</span> 下一步是遍历轮廓，对物品画出其最小外界矩形。其中对于因噪声产生的轮廓通过cv2.contoursArea（）滤除，接着由于在之前cv2.findcontours()函数中第三个参数metho选的是cv2.CHAIN_APPROX_SIMPLE因此得到的轮廓是压缩水平和垂直的端点值，通过画出外接最小矩形后得到矩形的<span class="hljs-number">4</span>个顶点值，通过顶点画出轮廓<br>![轮廓<span class="hljs-number">1</span>](/img/轮廓<span class="hljs-number">1.</span>png)   <br>![轮廓<span class="hljs-number">2</span>](/img/轮廓<span class="hljs-number">2.</span>png)  <br>&gt;  ** 代码实现<br>```python<br><span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> cnts:<br>    <span class="hljs-keyword">if</span> cv2.contourArea(c)&lt;<span class="hljs-number">100</span>:<br>        <span class="hljs-keyword">continue</span><br>    orig=img<br>    box=cv2.minAreaRect(c)<br>    box=cv2.boxPoints(box)<br>    box=np.array(box,dtype=<span class="hljs-string">&quot;int&quot;</span>)<br>    box=perspective.order_points(box)<br>    cv2.drawContours(orig,[box.astype(<span class="hljs-string">&quot;int&quot;</span>)],-<span class="hljs-number">1</span>,(<span class="hljs-number">0</span>,<span class="hljs-number">255</span>,<span class="hljs-number">0</span>),<span class="hljs-number">2</span>)<br><br>    <span class="hljs-comment">#给4个点画圈</span><br>    <span class="hljs-keyword">for</span> (x,y) <span class="hljs-keyword">in</span> box:<br>        cv2.circle(orig,(<span class="hljs-built_in">int</span>(x),<span class="hljs-built_in">int</span>(y)),<span class="hljs-number">5</span>,(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">255</span>),<span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure><blockquote><ol start="5"><li>接着由得到4个顶点值画出矩形再通过4个点画出各个中点后计算出距离从而得到像素值后除以pixels_per_metric得到测量值。<br><img src="/img/%E8%BD%AE%E5%BB%933.png" alt="轮廓3"><br><img src="/img/%E8%BD%AE%E5%BB%934.png" alt="轮廓4"><br>** 代码实现：</li></ol></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#由四个角得到长度和宽度计算尺寸</span><br>(tl,tr,br,bl)=box<br>(tcx,tcy)= midpoint(tl,tr)<br>(bcx,bcy) = midpoint(bl,br)<br>(lcx,lcy)= midpoint(tl,bl)<br>(rcx,rcy)= midpoint(tr,br)<br><br>cv2.circle(orig, (<span class="hljs-built_in">int</span>(tcx),<span class="hljs-built_in">int</span>(tcy)), <span class="hljs-number">5</span>, (<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">255</span>), <span class="hljs-number">2</span>)<br>cv2.circle(orig, (<span class="hljs-built_in">int</span>(bcx),<span class="hljs-built_in">int</span>(bcy)), <span class="hljs-number">5</span>, (<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">255</span>), <span class="hljs-number">2</span>)<br>cv2.circle(orig, (<span class="hljs-built_in">int</span>(lcx),<span class="hljs-built_in">int</span>(lcy)), <span class="hljs-number">5</span>, (<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">255</span>), <span class="hljs-number">2</span>)<br>cv2.circle(orig, (<span class="hljs-built_in">int</span>(rcx),<span class="hljs-built_in">int</span>(rcy)), <span class="hljs-number">5</span>, (<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">255</span>), <span class="hljs-number">2</span>)<br><br>cv2.line(orig,(<span class="hljs-built_in">int</span>(tcx),<span class="hljs-built_in">int</span>(tcy)),(<span class="hljs-built_in">int</span>(bcx),<span class="hljs-built_in">int</span>(bcy)),(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">255</span>),<span class="hljs-number">3</span>)<br>cv2.line(orig, (<span class="hljs-built_in">int</span>(lcx),<span class="hljs-built_in">int</span>(lcy)), (<span class="hljs-built_in">int</span>(rcx),<span class="hljs-built_in">int</span>(rcy)), (<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">255</span>), <span class="hljs-number">3</span>)<br></code></pre></td></tr></table></figure><blockquote><p>另一张是以橡皮为参考物的测量<br><img src="/img/%E8%BD%AE%E5%BB%935.png" alt="轮廓5"><br><img src="/img/%E8%BD%AE%E5%BB%936.png" alt="轮廓6"><br>完整代码:</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> scipy.spatial.distance <span class="hljs-keyword">import</span> euclidean<br><span class="hljs-keyword">from</span> imutils <span class="hljs-keyword">import</span> perspective<br><span class="hljs-keyword">from</span> imutils <span class="hljs-keyword">import</span> contours<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> imutils<br><span class="hljs-keyword">import</span> cv2<br><span class="hljs-keyword">import</span> math<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">midpoint</span>(<span class="hljs-params">p1,p2</span>):<br>    <span class="hljs-keyword">return</span> ((p1[<span class="hljs-number">0</span>]+p2[<span class="hljs-number">0</span>])/<span class="hljs-number">2</span>,(p1[<span class="hljs-number">1</span>]+p2[<span class="hljs-number">1</span>])/<span class="hljs-number">2</span>)<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">photopretreatment</span>(<span class="hljs-params">image,SHOWerode=<span class="hljs-literal">False</span></span>):<br>    image=cv2.cvtColor(image,cv2.COLOR_BGR2GRAY)<br><br>    gaussian=cv2.GaussianBlur(image,(<span class="hljs-number">7</span>,<span class="hljs-number">7</span>),<span class="hljs-number">0</span>)<br>    <span class="hljs-comment">#cv2.imshow(&quot;g&quot;,gaussian)</span><br>    canny=cv2.Canny(gaussian,<span class="hljs-number">50</span>,<span class="hljs-number">100</span>)<br>    <span class="hljs-comment">#cv2.imshow(&quot;g&quot;,canny)</span><br>    dilate=cv2.dilate(canny,<span class="hljs-literal">None</span>,iterations=<span class="hljs-number">1</span>)<br>    erode = cv2.erode(dilate,<span class="hljs-literal">None</span>, iterations=<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">if</span> SHOWerode:cv2.imshow(<span class="hljs-string">&quot;erode&quot;</span>,erode)<br>    <span class="hljs-keyword">return</span> erode<br><br><span class="hljs-comment">#imageROI = np.ones((100, 88, 3))</span><br><span class="hljs-comment">#imageROI =  coin_img[0:100, 0: 88]</span><br><br><span class="hljs-comment">#image[10:98, 10:98] = imageROI</span><br>coin_img=cv2.imread(<span class="hljs-string">&quot;meiyuan1.jpg&quot;</span>,flags=<span class="hljs-number">1</span>)<br>img=cv2.imread(<span class="hljs-string">&quot;mea.jpg&quot;</span>,flags=<span class="hljs-number">1</span>)<br>coin_img=cv2.resize(coin_img,(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>),<span class="hljs-literal">None</span>,<span class="hljs-number">0.18</span>,<span class="hljs-number">0.18</span>)<br>img=cv2.resize(img,(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>),<span class="hljs-literal">None</span>,<span class="hljs-number">0.2</span>,<span class="hljs-number">0.2</span>)<br>h,w=img.shape[:<span class="hljs-number">2</span>]<br>h1,w1=coin_img.shape[:<span class="hljs-number">2</span>]<br><span class="hljs-comment">#合成图片</span><br>imageROI = np.ones((<span class="hljs-number">92</span>, <span class="hljs-number">94</span>, <span class="hljs-number">3</span>))<br>imageROI = coin_img[<span class="hljs-number">0</span>:<span class="hljs-number">92</span>, <span class="hljs-number">0</span>: <span class="hljs-number">94</span>]<br>img[<span class="hljs-number">10</span>:<span class="hljs-number">102</span>, <span class="hljs-number">10</span>:<span class="hljs-number">104</span>]=imageROI<br><br>img1=photopretreatment(img,SHOWerode=<span class="hljs-literal">False</span>)<br><span class="hljs-comment">#找轮廓并排序</span><br>cnts=cv2.findContours(img1.copy(),cv2.RETR_EXTERNAL,cv2.CHAIN_APPROX_SIMPLE)<br>cnts=imutils.grab_contours(cnts)<span class="hljs-comment">#抓住轮廓</span><br>(cnts,_)=contours.sort_contours(cnts)<span class="hljs-comment">#轮廓排序</span><br><br><span class="hljs-comment">#定义pixpermectic</span><br>pixelsPerMetric = <span class="hljs-literal">None</span><br>width = <span class="hljs-number">0.955</span><br><span class="hljs-comment">#遍历轮廓并画出轮廓</span><br><span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> cnts:<br>    <span class="hljs-keyword">if</span> cv2.contourArea(c)&lt;<span class="hljs-number">100</span>:<br>        <span class="hljs-keyword">continue</span><br>    orig=img<br>    box=cv2.minAreaRect(c)<br>    box=cv2.boxPoints(box)<br>    box=np.array(box,dtype=<span class="hljs-string">&quot;int&quot;</span>)<br>    box=perspective.order_points(box)<br>    cv2.drawContours(orig,[box.astype(<span class="hljs-string">&quot;int&quot;</span>)],-<span class="hljs-number">1</span>,(<span class="hljs-number">0</span>,<span class="hljs-number">255</span>,<span class="hljs-number">0</span>),<span class="hljs-number">2</span>)<br><br>    <span class="hljs-comment">#给4个点画圈</span><br>    <span class="hljs-keyword">for</span> (x,y) <span class="hljs-keyword">in</span> box:<br>        cv2.circle(orig,(<span class="hljs-built_in">int</span>(x),<span class="hljs-built_in">int</span>(y)),<span class="hljs-number">5</span>,(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">255</span>),<span class="hljs-number">2</span>)<br>    <span class="hljs-comment">#由四个角得到长度和宽度计算尺寸</span><br>    (tl,tr,br,bl)=box<br>    (tcx,tcy)= midpoint(tl,tr)<br>    (bcx,bcy) = midpoint(bl,br)<br>    (lcx,lcy)= midpoint(tl,bl)<br>    (rcx,rcy)= midpoint(tr,br)<br><br>    cv2.circle(orig, (<span class="hljs-built_in">int</span>(tcx),<span class="hljs-built_in">int</span>(tcy)), <span class="hljs-number">5</span>, (<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">255</span>), <span class="hljs-number">2</span>)<br>    cv2.circle(orig, (<span class="hljs-built_in">int</span>(bcx),<span class="hljs-built_in">int</span>(bcy)), <span class="hljs-number">5</span>, (<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">255</span>), <span class="hljs-number">2</span>)<br>    cv2.circle(orig, (<span class="hljs-built_in">int</span>(lcx),<span class="hljs-built_in">int</span>(lcy)), <span class="hljs-number">5</span>, (<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">255</span>), <span class="hljs-number">2</span>)<br>    cv2.circle(orig, (<span class="hljs-built_in">int</span>(rcx),<span class="hljs-built_in">int</span>(rcy)), <span class="hljs-number">5</span>, (<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">255</span>), <span class="hljs-number">2</span>)<br><br>    cv2.line(orig,(<span class="hljs-built_in">int</span>(tcx),<span class="hljs-built_in">int</span>(tcy)),(<span class="hljs-built_in">int</span>(bcx),<span class="hljs-built_in">int</span>(bcy)),(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">255</span>),<span class="hljs-number">3</span>)<br>    cv2.line(orig, (<span class="hljs-built_in">int</span>(lcx),<span class="hljs-built_in">int</span>(lcy)), (<span class="hljs-built_in">int</span>(rcx),<span class="hljs-built_in">int</span>(rcy)), (<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">255</span>), <span class="hljs-number">3</span>)<br><br>    <span class="hljs-comment">#计算</span><br>    PA=euclidean((tcx,tcy),(bcx,bcy))<br>    PB=euclidean((lcx,lcy),(rcx,rcy))<br>    <span class="hljs-comment">#print(PA,PB)</span><br>    <span class="hljs-keyword">if</span> pixelsPerMetric <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span> :<br>        pixelsPerMetric=PB/width<br>    RA=PA/pixelsPerMetric<br>    RB=PB/pixelsPerMetric<br><br>    cv2.putText(orig,<span class="hljs-string">&quot;&#123;:.1f&#125;in&quot;</span>.<span class="hljs-built_in">format</span>(RA),(<span class="hljs-built_in">int</span>(lcx) + <span class="hljs-number">10</span>, <span class="hljs-built_in">int</span>(lcy) + <span class="hljs-number">10</span>),cv2.FONT_HERSHEY_SIMPLEX, <span class="hljs-number">0.65</span>, (<span class="hljs-number">255</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>), <span class="hljs-number">2</span>)<br>    cv2.putText(orig,<span class="hljs-string">&quot;&#123;:.1f&#125;in&quot;</span>.<span class="hljs-built_in">format</span>(RB),(<span class="hljs-built_in">int</span>(bcx)-<span class="hljs-number">10</span>,<span class="hljs-built_in">int</span>(bcy)-<span class="hljs-number">10</span>), cv2.FONT_HERSHEY_SIMPLEX, <span class="hljs-number">0.65</span>,(<span class="hljs-number">255</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>), <span class="hljs-number">2</span>)<br><br><br><br><br><br><br><br><br><br><span class="hljs-comment">#print(h,w)</span><br><span class="hljs-comment">#print(h1,w1)</span><br><br><br>cv2.imshow(<span class="hljs-string">&quot;img&quot;</span>,orig)<br><br>cv2.waitKey(<span class="hljs-number">0</span>)<br>cv2.destroyAllWindows()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>车道线检测</title>
    <link href="/2023/06/23/opencv%E8%BD%A6%E9%81%93%E7%BA%BF%E6%A3%80%E6%B5%8B/"/>
    <url>/2023/06/23/opencv%E8%BD%A6%E9%81%93%E7%BA%BF%E6%A3%80%E6%B5%8B/</url>
    
    <content type="html"><![CDATA[<p>本次学习内容是通过opencv的库函数来实现对一段视频车道线的检测。</p><h1 id="相机标定矫正畸变图像"><a href="#相机标定矫正畸变图像" class="headerlink" title="相机标定矫正畸变图像"></a>相机标定矫正畸变图像</h1><h2 id="相机标定"><a href="#相机标定" class="headerlink" title="相机标定"></a>相机标定</h2><p>将世界坐标系的坐标信息转到像素坐标系上，来确定空间3维几何位置与图像中对应点之间的关系。涉及变换的坐标系有世界坐标系，相机坐标系，图像坐标系，像素坐标系。</p><h3 id="世界坐标系到相机坐标系"><a href="#世界坐标系到相机坐标系" class="headerlink" title="世界坐标系到相机坐标系"></a>世界坐标系到相机坐标系</h3><p><img src="/img/%E5%9D%90%E6%A0%87%E7%B3%BB1.png" alt="世界坐标系到相机坐标系"><br>两个坐标系之间的变化为旋转和平移可以用旋转平移矩阵来表示：</p><p>$\begin{pmatrix}Xc \\ Yc \\ Zc \end{pmatrix}&#x3D;\begin{pmatrix}R &amp;t \\ 0 &amp; 1 \end{pmatrix}\cdot \begin{pmatrix}Xw \\ Yw \\ Zw \end{pmatrix}$<br>其中R为旋转矩阵，t为平移矩阵。</p><h3 id="相机坐标系到图像坐标系的变换"><a href="#相机坐标系到图像坐标系的变换" class="headerlink" title="相机坐标系到图像坐标系的变换"></a>相机坐标系到图像坐标系的变换</h3><p><img src="/img/%E5%9D%90%E6%A0%87%E7%B3%BB2.png" alt="世界坐标系到相机坐标系"><br>由相似三角形可以得出关系:$\frac{f}{Zc}&#x3D;\frac{x}{Xc}&#x3D;\frac{y}{Yc}$<br>从而写出矩阵形式为：</p><p>$$Zc\begin{pmatrix}x \\ y \\ 1 \end{pmatrix}&#x3D;\begin{pmatrix}f &amp; 0 &amp;0 &amp;0 \\ 0 &amp; f &amp; 0 &amp;0 \\ 0 &amp; 0 &amp; 1 &amp; 0 \end{pmatrix}\cdot \begin{pmatrix}Xc \\ Yc \\ Zc \\ 1 \end{pmatrix}$$<br>f为焦距。</p><h3 id="图像坐标系到像素坐标系"><a href="#图像坐标系到像素坐标系" class="headerlink" title="图像坐标系到像素坐标系"></a>图像坐标系到像素坐标系</h3><p><img src="/img/%E5%9D%90%E6%A0%87%E7%B3%BB3.png" alt="世界坐标系到相机坐标系"><br>$\begin{pmatrix}u \\ v \\ 1 \end{pmatrix}&#x3D;\begin{pmatrix}\frac{x}{dx} &amp;0 &amp;u0 \\ 0 &amp;\frac{y}{dy} &amp;v0 \ 0 &amp; 0 &amp; 1 \end{pmatrix}\cdot \begin{pmatrix}x \\ y \\ 1 \end{pmatrix}$</p><p>综上所述变化为：$Zc\begin{pmatrix}u \\ v \\ 1 \end{pmatrix}&#x3D;\begin{pmatrix}\frac{x}{dx} &amp;0 &amp;u0 \ 0 &amp;\frac{y}{dy} &amp;v0 \ 0 &amp; 0 &amp; 1 \end{pmatrix}\cdot\begin{pmatrix}f &amp; 0 &amp;0 &amp;0 \\ 0 &amp; f &amp; 0 &amp;0 \\ 0 &amp; 0 &amp; 1 &amp; 0 \end{pmatrix}\cdot \begin{pmatrix}R &amp;t \\ 0 &amp; 1 \end{pmatrix}\cdot \begin{pmatrix}Xw \\ Yw \\ Zw \end{pmatrix}$</p><h3 id="畸变"><a href="#畸变" class="headerlink" title="畸变"></a>畸变</h3><p>由于透镜的影响使得图片会产生畸变（主要分为两大类切向与径向畸变）<br>切向：$x_{cor}&#x3D;x+2p_{1}xy+p_{2}(r^{2}+2x^{2}) y_{cor}&#x3D;y+2p_{2}xy+p_{1}(r^{2}+2y^{2})$<br>径向:$x_{cor}&#x3D;x(1+k_{1}r^{2}+k_{2}r^{4}+k_{3}r^{6}) y_{cor}&#x3D;y(1+k_{1}r^{2}+k_{2}r^{4}+k_{3}r^{6})$<br>接着就是将纠正后的点通过内参到像素平面上</p><p>$\left{\begin{matrix}u&#x3D;f_{x}x_{cor}+u_{0} \\ v&#x3D;f_{y}y_{cor}+v_{0} \end{matrix}\right.$<br>其中fx为x&#x2F;dx，fy同理<br>本文通过opencv函数实现相机标定与畸变校正<br>通过不同角度拍摄的棋盘格来完成相机的标定，本文的棋盘格数据集为如下图所示<br><img src="/img/%E6%A3%8B%E7%9B%98%E6%A0%BC.jpeg" alt="棋盘格"></p><h3 id="代码实现矫正"><a href="#代码实现矫正" class="headerlink" title="代码实现矫正"></a>代码实现矫正</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">paths=glob.glob(<span class="hljs-string">r&#x27;../IR_camera_calib_img/ca*.jpg&#x27;</span>)<br></code></pre></td></tr></table></figure><p>由glob.glob（）函数获得20张棋盘位置，函数返回值用列表形式储存</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">ret,corners=cv2.findChessboardCorners(gray,(<span class="hljs-number">9</span>,<span class="hljs-number">6</span>),<span class="hljs-literal">None</span>)<br></code></pre></td></tr></table></figure><p>接下里用cv2.findChessboardCorners来找到棋盘格的内交点的像素坐标，由上图棋盘格能看出内角点为w&#x3D;9，h&#x3D;6 。</p><p>由于世界坐标能够自行进行设置，本文将世界坐标系的Z轴设为0。由此获得世界坐标系形式为（1,0,0），（2,0,0），（3,0,0）····为内交点的世界坐标用wld_object来保存，而通过cv2.findChessboardCorners获得的交点像素坐标系由img_object&#x3D;[]保存，下一步带入cv2.calibrateCamera（）来获得mtx是相机的内参矩阵；dist表述的相机畸变参数；rvecs表示旋转参数：；tvecs表示translation vectors，是平移参数。</p><p>最后通过cv2.undistort(img1,mtx,dis,None,mtx)来完成畸变校正</p><p>实现代码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs python">worldobject=np.zeros((<span class="hljs-number">9</span>*<span class="hljs-number">6</span>,<span class="hljs-number">3</span>),np.float32)<br>worldobject[:,:<span class="hljs-number">2</span>]=np.mgrid[<span class="hljs-number">0</span>:<span class="hljs-number">9</span>,<span class="hljs-number">0</span>:<span class="hljs-number">6</span>].T.reshape(-<span class="hljs-number">1</span>,<span class="hljs-number">2</span>)<br><br><span class="hljs-comment">#</span><br>wld_object=[]<br>img_object=[]<br>paths=glob.glob(<span class="hljs-string">r&#x27;../IR_camera_calib_img/ca*.jpg&#x27;</span>)<br><br><span class="hljs-comment">#plt.figure(figsize=(10, 6))</span><br><span class="hljs-comment">#print(paths)</span><br><span class="hljs-keyword">for</span> path <span class="hljs-keyword">in</span> paths:<br>    img= cv2.imread(path,flags=<span class="hljs-number">1</span>)<br>    gray=cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)<br><br>    <span class="hljs-comment">#找内角点</span><br>    ret,corners=cv2.findChessboardCorners(gray,(<span class="hljs-number">9</span>,<span class="hljs-number">6</span>),<span class="hljs-literal">None</span>)<br><br><br>    <span class="hljs-keyword">if</span> ret == <span class="hljs-literal">True</span>:<br>        wld_object.append(worldobject)<br>        img_object.append(corners)<br>        i+=<span class="hljs-number">1</span><br>        <span class="hljs-comment">#cv2.drawChessboardCorners(img,(11,8),corners,ret)</span><br>        <span class="hljs-comment">#cv2.imshow(&#x27;img&#x27;,img)</span><br>        <span class="hljs-comment">#plt.subplot(3,6,i)</span><br>        <span class="hljs-comment">#plt.imshow(img)</span><br>        <span class="hljs-comment">#cv2.waitKey(0)</span><br>        <span class="hljs-comment">#cv2.destroyAllWindows()</span><br><span class="hljs-comment">#plt.show()</span><br><br><span class="hljs-comment">#img1=cv2.imread(&#x27;100000.png&#x27;)</span><br>ret,mtx,dis,rvecs,tvecs=cv2.calibrateCamera(wld_object,img_object,gray.shape[::-<span class="hljs-number">1</span>],<span class="hljs-literal">None</span>,<span class="hljs-literal">None</span>)<br><br><br><span class="hljs-comment">#校正</span><br>img1=cv2.imread(<span class="hljs-string">&#x27;straight_lines1.jpg&#x27;</span>,)<br>cv2.imshow(<span class="hljs-string">&#x27;o&#x27;</span>,img1)<br>dst=cv2.undistort(img1,mtx,dis,<span class="hljs-literal">None</span>,mtx)<br>cv2.imshow(<span class="hljs-string">&#x27;d&#x27;</span>,dst)<br>cv2.waitKey(<span class="hljs-number">0</span>)<br>cv2.imwrite(<span class="hljs-string">&#x27;correct.jpg&#x27;</span>,dst)<br>cv2.destroyAllWindows()<br></code></pre></td></tr></table></figure><p>实现结果<br><img src="/img/%E6%A3%8B%E7%9B%98%E6%A0%BC%E7%BB%93%E6%9E%9C1.jpeg" alt="img"></p><p><img src="/img/%E6%A3%8B%E7%9B%98%E6%A0%BC%E7%BB%93%E6%9E%9C2.jpeg" alt="img"></p><h1 id="透视变化为了展现出感兴趣的区域（车道线区域）"><a href="#透视变化为了展现出感兴趣的区域（车道线区域）" class="headerlink" title="透视变化为了展现出感兴趣的区域（车道线区域）"></a>透视变化为了展现出感兴趣的区域（车道线区域）</h1><p>在原图中车道线区域可以认为一个梯形，现在要把这个区域变成我们俯视时看到的场景便于车道线接下来的识别操作本文选取<br>scr&#x3D;np.float32([[575,460],[700,460],[1096,720],[200,720]])<br>dst&#x3D;np.float32([[200,0],[950,0],[950,720],[200,720]])<br>scr可以认为原图中的梯形区域dst可以认为我们俯视车道线是的矩形区域通过cv2.getPerspectiveTransform()来获得变换矩阵<br>再带入cv2.warpPerspective(img,M,(w,h),flags&#x3D;cv2.INTER_LINEAR)完成透视变换。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> cv2<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>img=cv2.imread(<span class="hljs-string">&#x27;correct.jpg&#x27;</span>)<br>h,w=img.shape[:<span class="hljs-number">2</span>]<br>scr=np.float32([[<span class="hljs-number">575</span>,<span class="hljs-number">460</span>],[<span class="hljs-number">700</span>,<span class="hljs-number">460</span>],[<span class="hljs-number">1096</span>,<span class="hljs-number">720</span>],[<span class="hljs-number">200</span>,<span class="hljs-number">720</span>]])<br>dst=np.float32([[<span class="hljs-number">200</span>,<span class="hljs-number">0</span>],[<span class="hljs-number">950</span>,<span class="hljs-number">0</span>],[<span class="hljs-number">950</span>,<span class="hljs-number">720</span>],[<span class="hljs-number">200</span>,<span class="hljs-number">720</span>]])<br>M=cv2.getPerspectiveTransform(scr,dst,<span class="hljs-literal">None</span>)<br>Minv=cv2.getPerspectiveTransform(dst,scr,<span class="hljs-literal">None</span>)<br>img1=cv2.warpPerspective(img,M,(w,h),flags=cv2.INTER_LINEAR)<br>plt.figure(figsize=(<span class="hljs-number">10</span>,<span class="hljs-number">6</span>))<br>plt.subplot(<span class="hljs-number">121</span>),plt.imshow(img)<br>plt.subplot(<span class="hljs-number">122</span>),plt.imshow(img1)<br>plt.show()<br></code></pre></td></tr></table></figure><p><img src="/img/%E5%AE%9E%E9%AA%8C%E5%9B%BE%E7%89%871.jpeg" alt="img"></p><h1 id="通过hls图像提取白色车道线，通过lab图像提取黄色车道线"><a href="#通过hls图像提取白色车道线，通过lab图像提取黄色车道线" class="headerlink" title="通过hls图像提取白色车道线，通过lab图像提取黄色车道线"></a>通过hls图像提取白色车道线，通过lab图像提取黄色车道线</h1><p>接下来第三步开始识别车道线，由于车道线是黄色和白色，现在目的是将黄色线和白色线分别提出来最后在组合在一张图上完成检测</p><p>首先是通过HSL颜色空间提取出白色车线</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python">hls=cv2.cvtColor(img1,cv2.COLOR_BGR2HLS)<br>lab=cv2.cvtColor(img1,cv2.COLOR_BGR2Lab)<br><br><span class="hljs-comment">#print(hls)</span><br>L_channel=hls[:,:,<span class="hljs-number">1</span>]<br>L_channel=L_channel*(<span class="hljs-number">255</span>/np.<span class="hljs-built_in">max</span>(L_channel))<br>h,w=L_channel.shape[:<span class="hljs-number">2</span>]<br><br>binary_out=np.zeros_like(L_channel)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(h):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(w):<br>        <span class="hljs-keyword">if</span> L_channel[i][j]&gt;=<span class="hljs-number">220</span> <span class="hljs-keyword">and</span> L_channel[i][j]&lt;=<span class="hljs-number">255</span>:<br>            binary_out[i][j]=<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p><img src="/img/%E5%AE%9E%E9%AA%8C%E5%9B%BE%E7%89%872.jpeg" alt="img"><br><img src="/img/%E5%AE%9E%E9%AA%8C%E5%9B%BE%E7%89%873.jpeg" alt="img"><br><img src="/img/%E5%AE%9E%E9%AA%8C%E5%9B%BE%E7%89%874.jpeg" alt="img"></p><p>再通过Lab颜色空间提取黄色车道线</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">b_channel=lab[:,:,<span class="hljs-number">2</span>]<br><span class="hljs-keyword">if</span> b_channel.<span class="hljs-built_in">max</span>()&gt;<span class="hljs-number">100</span>:<br>    b_channel=b_channel*(<span class="hljs-number">255</span>/np.<span class="hljs-built_in">max</span>(b_channel))<br>lab_binary=np.zeros_like(b_channel)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(h):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(w):<br>        <span class="hljs-keyword">if</span> b_channel[i][j]&gt;=<span class="hljs-number">195</span> <span class="hljs-keyword">and</span> b_channel[i][j]&lt;=<span class="hljs-number">255</span>:<br>            lab_binary[i][j]=<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p><img src="/img/%E5%AE%9E%E9%AA%8C%E5%9B%BE%E7%89%875.jpeg" alt="img"><br><img src="/img/%E5%AE%9E%E9%AA%8C%E5%9B%BE%E7%89%876.jpeg" alt="img"><br><img src="/img/%E5%AE%9E%E9%AA%8C%E5%9B%BE%E7%89%877.jpeg" alt="img"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">out=np.zeros_like(lab_binary)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(h):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(w):<br>        <span class="hljs-keyword">if</span> binary_out[i][j]==<span class="hljs-number">1</span> <span class="hljs-keyword">or</span> lab_binary[i][j]==<span class="hljs-number">1</span>:<br>            out[i][j]=<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p><img src="/img/%E5%AE%9E%E9%AA%8C%E5%9B%BE%E7%89%878.jpeg" alt="img"><br><img src="/img/%E5%AE%9E%E9%AA%8C%E5%9B%BE%E7%89%879.jpeg" alt="img"><br><img src="/img/%E5%AE%9E%E9%AA%8C%E5%9B%BE%E7%89%8710.jpeg" alt="img"></p><h1 id="使用滑动窗口来识别车道线"><a href="#使用滑动窗口来识别车道线" class="headerlink" title="使用滑动窗口来识别车道线"></a>使用滑动窗口来识别车道线</h1><p>接下来是滑动窗口识别车道线<br>经过提取车道线后，可以的到非黑即白的二值化图像，可以利用直方图统计的方法来确定车道线在图像上的位置如下直方图所示横轴为图像水平坐标系，纵轴为像素个数<br><img src="/img/%E5%AE%9E%E9%AA%8C%E5%9B%BE%E7%89%8711.jpeg" alt="img"><br><img src="/img/%E5%AE%9E%E9%AA%8C%E5%9B%BE%E7%89%8712.jpeg" alt="img"></p><p>实现代码<br>直方图统计是由np.sum（）axis&#x3D;0是压缩行，每一列的进行相加</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">histogram = np.<span class="hljs-built_in">sum</span>(out[:,:], axis=<span class="hljs-number">0</span>)<br>x=np.arange(<span class="hljs-number">1280</span>)<br>plt.plot(x,histogram, linewidth=<span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure><h1 id="使用滑动窗口来识别车道线-1"><a href="#使用滑动窗口来识别车道线-1" class="headerlink" title="使用滑动窗口来识别车道线"></a>使用滑动窗口来识别车道线</h1><p>接下来就是实现滑动窗口，首先定义窗口大小本次实验采用9个窗口那么高度为img.shape[0]&#x2F;9</p><p>再找到图像中车道线最大值处（使用np.argmax），leftx_base,与rightx_base分别为第一个窗口的中点，将宽度设成100得到一个宽200高80的窗口。</p><p>接下来开始遍历图像寻找非0且的像素点，通过nonzero实现将其索引值保存在left_lane_inds（左车道线）右车道线同理</p><p>在寻找的过程中，如果非0的像素点超过一定的阈值那么将窗口中心点坐标改变。</p><p>以上就是滑动窗口的实现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs python">leftx_base = np.argmax(histogram[:midpoint])<br>rightx_base = np.argmax(histogram[midpoint:]) + midpoint<br><span class="hljs-comment">#窗口</span><br>windows=<span class="hljs-number">9</span><br>windows_height=out.shape[<span class="hljs-number">0</span>]//windows<br>margin=<span class="hljs-number">100</span><br>minpix=<span class="hljs-number">50</span><br><span class="hljs-comment">#统计</span><br>nonzero=out.nonzero()<br>nonzeroy=np.array(nonzero[<span class="hljs-number">0</span>])<br>nonzerox=np.array(nonzero[<span class="hljs-number">1</span>])<br><br>Left_lane_inds=[]<br>Right_lane_inds=[]<br>leftx_current = leftx_base<br>rightx_current = rightx_base<br><br><span class="hljs-keyword">for</span> window <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(windows):<br>    win_y_low=out.shape[<span class="hljs-number">0</span>]-(window+<span class="hljs-number">1</span>)*windows_height<br>    win_y_high = out.shape[<span class="hljs-number">0</span>] - window  * windows_height<br>    win_xleft_low= leftx_current-margin<br>    win_xleft_high = leftx_current + margin<br>    win_xright_low = rightx_current - margin<br>    win_xright_high = rightx_current + margin<br><br>    <span class="hljs-comment">#Draw</span><br>    cv2.rectangle(out_img,(win_xleft_low,win_y_low),(win_xleft_high,win_y_high),[<span class="hljs-number">0</span>,<span class="hljs-number">255</span>,<span class="hljs-number">0</span>],<span class="hljs-number">2</span>)<br>    cv2.rectangle(out_img, (win_xright_low, win_y_low), (win_xright_high, win_y_high), [<span class="hljs-number">0</span>, <span class="hljs-number">255</span>, <span class="hljs-number">0</span>], <span class="hljs-number">2</span>)<br><br>    good_left_inds =((nonzerox&gt;=win_xleft_low)&amp;(nonzerox&lt;win_xleft_high)&amp;(nonzeroy&gt;=win_y_low)&amp;(nonzeroy&lt;win_y_high)).nonzero()[<span class="hljs-number">0</span>]<br>    good_right_inds =((nonzerox&gt;=win_xright_low)&amp;(nonzerox&lt;win_xright_high)&amp;(nonzeroy&gt;=win_y_low)&amp;(nonzeroy&lt;win_y_high)).nonzero()[<span class="hljs-number">0</span>]<br><br>    Left_lane_inds.append(good_left_inds)<br>    Right_lane_inds.append(good_right_inds)<br><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(good_left_inds)&gt;minpix:leftx_current = np.int32(np.mean(nonzerox[good_left_inds]))<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(good_right_inds) &gt; minpix: rightx_current = np.int32(np.mean(nonzerox[good_right_inds]))<br><br>Left_lane_inds=np.concatenate(Left_lane_inds)<br>Right_lane_inds=np.concatenate(Right_lane_inds)<br><br>lefttx=nonzerox[Left_lane_inds]<br>leftty=nonzeroy[Left_lane_inds]<br>righttx=nonzerox[Right_lane_inds]<br>rightty=nonzeroy[Right_lane_inds]<br><br><br>left_fit=np.polyfit(leftty,lefttx,<span class="hljs-number">2</span>)<br>right_fit=np.polyfit(rightty,righttx,<span class="hljs-number">2</span>)<br><br>ploty=np.linspace(<span class="hljs-number">0</span>,out.shape[<span class="hljs-number">0</span>]-<span class="hljs-number">1</span>,out.shape[<span class="hljs-number">0</span>])<br>left_fitx=left_fit[<span class="hljs-number">0</span>]*ploty**<span class="hljs-number">2</span>+ploty*left_fit[<span class="hljs-number">1</span>]+left_fit[<span class="hljs-number">2</span>]<br>right_fitx=right_fit[<span class="hljs-number">0</span>]*ploty**<span class="hljs-number">2</span>+ploty*right_fit[<span class="hljs-number">1</span>]+right_fit[<span class="hljs-number">2</span>]<br>out_img[leftty, lefttx] = [<span class="hljs-number">255</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]<br>out_img[rightty, righttx] = [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">255</span>]<br><br><span class="hljs-comment">#plt.plot(left_fitx, ploty,  linewidth=2)</span><br><span class="hljs-comment">#plt.plot(right_fitx, ploty,  linewidth=2)</span><br><br>plt.subplot(<span class="hljs-number">121</span>),plt.imshow(img1,<span class="hljs-string">&#x27;gray&#x27;</span>)<br>plt.subplot(<span class="hljs-number">122</span>),plt.imshow(out_img,<span class="hljs-string">&#x27;gray&#x27;</span>)<br>plt.show()<br></code></pre></td></tr></table></figure><p><img src="/img/%E5%AE%9E%E9%AA%8C%E5%9B%BE%E7%89%8713.jpeg" alt="img"></p><h1 id="二项式拟合求出车道线曲线"><a href="#二项式拟合求出车道线曲线" class="headerlink" title="二项式拟合求出车道线曲线"></a>二项式拟合求出车道线曲线</h1><p>接着通过上一步得到的非0点的索引值（即像素的横纵坐标）来进行二项式多项式拟合得到下图<br>二次函数表示为y&#x3D;ax**2+bx+c使用函数np.polyfit()带入坐标值返回[a,b,c]二次函数三个系数，而ploty可以认为表示的是自变量通过np.linspace得到<br><img src="/img/%E5%AE%9E%E9%AA%8C%E5%9B%BE%E7%89%8714.jpeg" alt="img"><br>通过上述得到的二次项系数在图像中分别获得二次项曲线的坐标（x,y）分别用pts_left与pts_right保存，通过cv2.fillpoly填充车道线之间颜色最后逆投影到原图像上</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">ploty=np.linspace(<span class="hljs-number">0</span>,binary_warped.shape[<span class="hljs-number">0</span>]-<span class="hljs-number">1</span>,binary_warped.shape[<span class="hljs-number">0</span>])<br>   left_fitx = left_fit[<span class="hljs-number">0</span>] * ploty ** <span class="hljs-number">2</span> + left_fit[<span class="hljs-number">1</span>] * ploty + left_fit[<span class="hljs-number">2</span>]<br>   right_fitx = right_fit[<span class="hljs-number">0</span>] * ploty ** <span class="hljs-number">2</span> + right_fit[<span class="hljs-number">1</span>] * ploty + right_fit[<span class="hljs-number">2</span>]<br>   warp_zero = np.zeros_like(binary_warped).astype(np.uint8)<br>   color_warp=np.dstack((warp_zero,warp_zero,warp_zero))<br>   pts_left = np.array([np.transpose(np.vstack([left_fitx, ploty]))])<br>   pts_right = np.array([np.flipud(np.transpose(np.vstack([right_fitx, ploty])))])<br>   pts = np.hstack((pts_left, pts_right))<br>   cv2.fillPoly(color_warp,np.int_([pts]),(<span class="hljs-number">0</span>,<span class="hljs-number">255</span>,<span class="hljs-number">0</span>))<br><br>   newwarp=cv2.warpPerspective(color_warp, Minv, (undist.shape[<span class="hljs-number">1</span>], undist.shape[<span class="hljs-number">0</span>]))<br>   result = cv2.addWeighted(undist, <span class="hljs-number">1</span>, newwarp, <span class="hljs-number">0.3</span>, <span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><p><img src="/img/%E5%AE%9E%E9%AA%8C%E5%9B%BE%E7%89%8715.jpeg" alt="img"></p><h1 id="求出曲率半径和偏离位置"><a href="#求出曲率半径和偏离位置" class="headerlink" title="求出曲率半径和偏离位置"></a>求出曲率半径和偏离位置</h1><p>还有曲率半径和偏离位置的求取</p><p>由于是二次函数y&#x3D;ax**2+bx+c可以由公式求得曲率半径为<br>$$(1+{y}’^{2})^{1.5}\over{y}’’$$<br>而偏离位置为车道线之间的距离与图像中心距离之差</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python">ploty = np.linspace(<span class="hljs-number">0</span>, binary_warped.shape[<span class="hljs-number">0</span>] - <span class="hljs-number">1</span>, binary_warped.shape[<span class="hljs-number">0</span>])<br>leftx = left_fit[<span class="hljs-number">0</span>] * ploty ** <span class="hljs-number">2</span> + left_fit[<span class="hljs-number">1</span>] * ploty + left_fit[<span class="hljs-number">2</span>]<br>rightx = right_fit[<span class="hljs-number">0</span>] * ploty ** <span class="hljs-number">2</span> + right_fit[<span class="hljs-number">1</span>] * ploty + right_fit[<span class="hljs-number">2</span>]<br><br>ym_per_pix = <span class="hljs-number">30</span> / <span class="hljs-number">720</span>  <span class="hljs-comment"># meters per pixel in y dimension</span><br>xm_per_pix = <span class="hljs-number">3.7</span> / <span class="hljs-number">700</span>  <span class="hljs-comment"># meters per pixel in x dimension</span><br>y_eval = np.<span class="hljs-built_in">max</span>(ploty)<br>left_cur_fit=np.polyfit(ploty*ym_per_pix,leftx*xm_per_pix,<span class="hljs-number">2</span>)<br>right_cur_fit=np.polyfit(ploty*ym_per_pix,rightx*xm_per_pix,<span class="hljs-number">2</span>)<br><br>left_curverad=((<span class="hljs-number">1</span> + (<span class="hljs-number">2</span>*left_cur_fit[<span class="hljs-number">0</span>]*y_eval*ym_per_pix + left_cur_fit[<span class="hljs-number">1</span>])**<span class="hljs-number">2</span>)**<span class="hljs-number">1.5</span>) / np.absolute(<span class="hljs-number">2</span>*left_cur_fit[<span class="hljs-number">0</span>])<br>right_curverad=((<span class="hljs-number">1</span> + (<span class="hljs-number">2</span>*right_cur_fit[<span class="hljs-number">0</span>]*y_eval*ym_per_pix + right_cur_fit[<span class="hljs-number">1</span>])**<span class="hljs-number">2</span>)**<span class="hljs-number">1.5</span>) / np.absolute(<span class="hljs-number">2</span>*right_cur_fit[<span class="hljs-number">0</span>])<br>curverad=(left_curverad+right_curverad)/<span class="hljs-number">2.</span><br><span class="hljs-comment">#</span><br>lane_width=np.absolute(leftx[<span class="hljs-number">719</span>]-rightx[<span class="hljs-number">719</span>])<br>lane_xm_per_pix=<span class="hljs-number">3.7</span>/lane_width<br>veh_pos=(leftx[<span class="hljs-number">719</span>]+rightx[<span class="hljs-number">719</span>])*lane_xm_per_pix/<span class="hljs-number">2.</span><br>cen_pos=binary_warped.shape[<span class="hljs-number">1</span>]*lane_xm_per_pix/<span class="hljs-number">2.</span><br>distance_from_center=np.absolute(cen_pos-veh_pos)<br></code></pre></td></tr></table></figure><h1 id="逆投影到原图上"><a href="#逆投影到原图上" class="headerlink" title="逆投影到原图上"></a>逆投影到原图上</h1><p><img src="/img/%E5%AE%9E%E9%AA%8C%E5%9B%BE%E7%89%8716.jpeg" alt="img"></p><h1 id="显示检测过程"><a href="#显示检测过程" class="headerlink" title="显示检测过程"></a>显示检测过程</h1><p>最终实现视频</p><div style="position: relative; width: 100%; height: 10; padding-bottom: 75%;"><iframe src="https://www.bilibili.com/video/BV1os4y1k7mt/?vd_source=de53b9bf2fb1c88037580bfd620f285a" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" style="position: absolute; width: 110%; height: 115%; left: 0; top: 0;"> </iframe></div>]]></content>
    
    
    
    <tags>
      
      <tag>一个标签</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Markdown</title>
    <link href="/2023/06/21/Markdown/"/>
    <url>/2023/06/21/Markdown/</url>
    
    <content type="html"><![CDATA[<h1 id="Markdown-标题"><a href="#Markdown-标题" class="headerlink" title="Markdown 标题"></a>Markdown 标题</h1><p>下面是使用Markdown设置标题(几号标题)</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs clean"># 一级（注意#后面要有空格）<br>## 二级<br>### 三级<br>#### 四级<br>##### 五级<br>###### 六级<br></code></pre></td></tr></table></figure><h1 id="Markdown-段落"><a href="#Markdown-段落" class="headerlink" title="Markdown 段落"></a>Markdown 段落</h1><h2 id="换行"><a href="#换行" class="headerlink" title="换行"></a>换行</h2><p>进行段落的换行操作有</p><p>1.进行两次换行<br>2.空格2次再换行</p><h2 id="Markdown-字体"><a href="#Markdown-字体" class="headerlink" title="Markdown 字体"></a>Markdown 字体</h2><p>如下所示: </p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">*斜体文本*<span class="hljs-params">-----------</span>（一个*号是斜体）<br><br>_斜体文本_<span class="hljs-params">-----------</span>（一个下划是斜体）<br><br>**粗体文本**<span class="hljs-params">---------</span>（两个*号是粗体）<br><br>__粗体文本__<span class="hljs-params">---------</span>（两个下划是粗体）<br><br>***粗斜体文本***<span class="hljs-params">-----</span>（三个*号是粗斜）<br><br>___粗斜体文本___<span class="hljs-params">-----</span>（三个下划是粗斜）<br><br>~~删除线文本~~<span class="hljs-params">-------</span>（两个波浪是删除）<br><br>&lt;u&gt;下划线文本&lt;<span class="hljs-string">/u</span>&gt;<span class="hljs-params">----</span>（一个u符是下划）<br><br>创建一个脚注<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="阿巴阿巴[//]: # (注释文本，不会在浏览器中显示。)[^_^]: # (注释文本，不会在浏览器中显示。)">[1]</span></a></sup><br><br># Markdown 列表共有三种列表## 有序列表就是用数字加.的方式<hexoPostRenderCodeBlock><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span> 这样<br><span class="hljs-bullet">2.</span> 表示<br><span class="hljs-bullet">3.</span> .是在英文输入法下且之后内容前有个空格<br></code></pre></td></tr></table></figure><h2 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h2><p>使用了+（加号），-（减号），<em>（</em>号）；</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">*</span> 听话的便当<br><br><span class="hljs-bullet">*</span> 听话的便当<br><br><span class="hljs-bullet">*</span> 听话的便当<br><br><span class="hljs-bullet">+</span> 注意<br><br><span class="hljs-bullet">+</span> 注意<br><br><span class="hljs-bullet">+</span> 注意<br><br><span class="hljs-bullet">-</span> 符号后加空格<br><br><span class="hljs-bullet">-</span> 符号后加空格<br><br><span class="hljs-bullet">-</span> 符号后加空格<br></code></pre></td></tr></table></figure><p>输出为：一个点加内容</p><h2 id="嵌套列表"><a href="#嵌套列表" class="headerlink" title="嵌套列表"></a>嵌套列表</h2><h3 id="有序嵌套列表"><a href="#有序嵌套列表" class="headerlink" title="有序嵌套列表"></a>有序嵌套列表</h3><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-number">1</span>. 听话的便当<br>    - 听话的便当<br>    - 听话的便当<br><span class="hljs-number">2</span>. 注意空格<br>    + 空格<br>    + 空格<br><span class="hljs-number">3</span>. <span class="hljs-string">&quot;-&quot;</span>，<span class="hljs-string">&quot;*&quot;</span>和<span class="hljs-string">&quot;+&quot;</span>前面有四个空格<br>    * <span class="hljs-string">&quot;-&quot;</span>，<span class="hljs-string">&quot;*&quot;</span>和<span class="hljs-string">&quot;+&quot;</span>前面有四个空格<br>    * <span class="hljs-string">&quot;-&quot;</span>，<span class="hljs-string">&quot;*&quot;</span>和<span class="hljs-string">&quot;+&quot;</span>前面有四个空格<br></code></pre></td></tr></table></figure><h3 id="无序嵌套列表"><a href="#无序嵌套列表" class="headerlink" title="无序嵌套列表"></a>无序嵌套列表</h3><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs 1c">- 就是把数字换成符号<br>    - 就是把数字换成符号<br>    - 就是把数字换成符号<br>+ 注意空格<br>    + 空格<br>    + 空格<br>* <span class="hljs-string">&quot;-&quot;</span>，<span class="hljs-string">&quot;*&quot;</span>和<span class="hljs-string">&quot;+&quot;</span>前面有四个空格<br>    * <span class="hljs-string">&quot;-&quot;</span>，<span class="hljs-string">&quot;*&quot;</span>和<span class="hljs-string">&quot;+&quot;</span>前面有四个空格<br>    * <span class="hljs-string">&quot;-&quot;</span>，<span class="hljs-string">&quot;*&quot;</span>和<span class="hljs-string">&quot;+&quot;</span>前面有四个空格<br></code></pre></td></tr></table></figure><h1 id="Markdown-区块"><a href="#Markdown-区块" class="headerlink" title="Markdown 区块"></a>Markdown 区块</h1><figure class="highlight node-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs node-repl"><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">听话的便当</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript"><span class="hljs-title class_">Markdown</span></span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">区块</span><br></code></pre></td></tr></table></figure><p>区块里可以使用列表，列表里可以使用区块</p><h1 id="Markdown-代码"><a href="#Markdown-代码" class="headerlink" title="Markdown 代码"></a>Markdown 代码</h1><h1 id="Markdown-链接"><a href="#Markdown-链接" class="headerlink" title="Markdown 链接"></a>Markdown 链接</h1><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk">这是[听话的便当](https:<span class="hljs-regexp">//</span>www/thdbd.gitbook.io)的网站<br><br>或者<br><br>这是听话的便当的网站 &lt;https:<span class="hljs-regexp">//</span>www.thdbd.gitbook.io&gt; <br>[<span class="hljs-regexp">//</span>]: <span class="hljs-comment"># (直接显示链接)</span><br></code></pre></td></tr></table></figure><p>或者像论文文献一样</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs less">这是我的<span class="hljs-selector-attr">[网站]</span><span class="hljs-selector-attr">[1]</span><br><br>这是我的<span class="hljs-selector-attr">[第二个网站]</span><span class="hljs-selector-attr">[2]</span><br><br>······<br><br>这是我的<span class="hljs-selector-attr">[网站]</span><span class="hljs-selector-attr">[1]</span><br><br>这是我的<span class="hljs-selector-attr">[第二个网站]</span><span class="hljs-selector-attr">[2]</span><br><br><span class="hljs-selector-attr">[1]</span>: <span class="hljs-selector-tag">https</span>:<span class="hljs-comment">//www.github.io/</span><br><span class="hljs-selector-attr">[2]</span>: <span class="hljs-selector-tag">https</span>:<span class="hljs-comment">//www.gitbook.io/</span><br></code></pre></td></tr></table></figure><h1 id="Markdown-表格"><a href="#Markdown-表格" class="headerlink" title="Markdown 表格"></a>Markdown 表格</h1><p>Markdown 表格使用 | 来分隔不同的单元格；<br>使用 - 来分隔表头和其他行；<br>例如：</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">|<span class="hljs-string">  thdbd  </span>|<span class="hljs-string">  thdbd  </span>|<br>|<span class="hljs-string">  -----  </span>|<span class="hljs-string">  -----  </span>|<br>|<span class="hljs-string">   123   </span>|<span class="hljs-string">   456   </span>|<br>|<span class="hljs-string">   321   </span>|<span class="hljs-string">   654   </span>|<br><br><br>```  <br>也可以设计一下表格内文字的居中方式：<br>-: 设置内容和标题栏居右对齐。<br>:- 设置内容和标题栏居左对齐。<br>:-: 设置内容和标题栏居中对齐。<br><br><br>例如：<br><br><br></code></pre></td></tr></table></figure><table><thead><tr><th align="center">thdbd</th><th align="center">thdbd</th></tr></thead><tbody><tr><td align="center">123</td><td align="center">456</td></tr><tr><td align="center">321</td><td align="center">654</td></tr></tbody></table><pre><code class="hljs">&lt;section class=&quot;footnotes&quot;&gt;&lt;div class=&quot;footnote-list&quot;&gt;&lt;ol&gt;&lt;li&gt;&lt;span id=&quot;fn:1&quot; class=&quot;footnote-text&quot;&gt;&lt;span&gt;阿巴阿巴&lt;br&gt;&lt;br&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&amp;#x2F;&amp;#x2F;&lt;/span&gt;]: &lt;span class=&quot;hljs-comment&quot;&gt;# (注释文本，不会在浏览器中显示。)&lt;/span&gt;&lt;br&gt;&lt;br&gt;[^_^]: &lt;span class=&quot;hljs-comment&quot;&gt;# (注释文本，不会在浏览器中显示。)&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/hexoPostRenderCodeBlock&gt;&lt;a href=&quot;#fnref:1&quot; rev=&quot;footnote&quot; class=&quot;footnote-backref&quot;&gt; ↩&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/section&gt;</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>一个标签</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Markdown实例</title>
    <link href="/2023/06/21/Markdown%E5%AE%9E%E4%BE%8B/"/>
    <url>/2023/06/21/Markdown%E5%AE%9E%E4%BE%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="欢迎使用Markdown编辑器"><a href="#欢迎使用Markdown编辑器" class="headerlink" title="欢迎使用Markdown编辑器"></a>欢迎使用Markdown编辑器</h1><p>你好！ 这是你第一次使用 <strong>Markdown编辑器</strong> 所展示的欢迎页。如果你想学习如何使用Markdown编辑器, 可以仔细阅读这篇文章，了解一下Markdown的基本语法知识。</p><h2 id="新的改变"><a href="#新的改变" class="headerlink" title="新的改变"></a>新的改变</h2><p>我们对Markdown编辑器进行了一些功能拓展与语法支持，除了标准的Markdown编辑器功能，我们增加了如下几点新功能，帮助你用它写博客：</p><ol><li><strong>全新的界面设计</strong> ，将会带来全新的写作体验；</li><li>在创作中心设置你喜爱的代码高亮样式，Markdown <strong>将代码片显示选择的高亮样式</strong> 进行展示；</li><li>增加了 <strong>图片拖拽</strong> 功能，你可以将本地的图片直接拖拽到编辑区域直接展示；</li><li>全新的 <strong>KaTeX数学公式</strong> 语法；</li><li>增加了支持<strong>甘特图的mermaid语法<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="[mermaid语法说明](https://mermaidjs.github.io/)"><a href="http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference">1</a></span></a></sup></strong> 功能；</li><li>增加了 <strong>多屏幕编辑</strong> Markdown文章功能；</li><li>增加了 <strong>焦点写作模式、预览模式、简洁写作模式、左右区域同步滚轮设置</strong> 等功能，功能按钮位于编辑区域与预览区域中间；</li><li>增加了 <strong>检查列表</strong> 功能。</li></ol><h2 id="功能快捷键"><a href="#功能快捷键" class="headerlink" title="功能快捷键"></a>功能快捷键</h2><p>撤销：<kbd>Ctrl/Command</kbd> + <kbd>Z</kbd><br>重做：<kbd>Ctrl/Command</kbd> + <kbd>Y</kbd><br>加粗：<kbd>Ctrl/Command</kbd> + <kbd>B</kbd><br>斜体：<kbd>Ctrl/Command</kbd> + <kbd>I</kbd><br>标题：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>H</kbd><br>无序列表：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>U</kbd><br>有序列表：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>O</kbd><br>检查列表：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>C</kbd><br>插入代码：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>K</kbd><br>插入链接：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>L</kbd><br>插入图片：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>G</kbd><br>查找：<kbd>Ctrl/Command</kbd> + <kbd>F</kbd><br>替换：<kbd>Ctrl/Command</kbd> + <kbd>G</kbd></p><h2 id="合理的创建标题，有助于目录的生成"><a href="#合理的创建标题，有助于目录的生成" class="headerlink" title="合理的创建标题，有助于目录的生成"></a>合理的创建标题，有助于目录的生成</h2><p>直接输入1次<kbd>#</kbd>，并按下<kbd>space</kbd>后，将生成1级标题。<br>输入2次<kbd>#</kbd>，并按下<kbd>space</kbd>后，将生成2级标题。<br>以此类推，我们支持6级标题。有助于使用<code>TOC</code>语法后生成一个完美的目录。</p><h2 id="如何改变文本的样式"><a href="#如何改变文本的样式" class="headerlink" title="如何改变文本的样式"></a>如何改变文本的样式</h2><p><em>强调文本</em> <em>强调文本</em></p><p><strong>加粗文本</strong> <strong>加粗文本</strong></p><p>&#x3D;&#x3D;标记文本&#x3D;&#x3D;</p><p><del>删除文本</del></p><blockquote><p>引用文本</p></blockquote><p>H<del>2</del>O is是液体。</p><p>2^10^ 运算结果是 1024.</p><h2 id="插入链接与图片"><a href="#插入链接与图片" class="headerlink" title="插入链接与图片"></a>插入链接与图片</h2><p>链接: <a href="https://www.csdn.net/">link</a>.</p><p>图片: <img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw" alt="Alt"></p><p>带尺寸的图片: ![Alt](<a href="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw">https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw</a> &#x3D;30x30)</p><p>居中的图片: <img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw#pic_center" alt="Alt"></p><p>居中并且带尺寸的图片: ![Alt](<a href="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw#pic_center">https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw#pic_center</a> &#x3D;30x30)</p><p>当然，我们为了让用户更加便捷，我们增加了图片拖拽功能。</p><h2 id="如何插入一段漂亮的代码片"><a href="#如何插入一段漂亮的代码片" class="headerlink" title="如何插入一段漂亮的代码片"></a>如何插入一段漂亮的代码片</h2><p>去<a href="https://mp.csdn.net/console/configBlog">博客设置</a>页面，选择一款你喜欢的代码片高亮样式，下面展示同样高亮的 <code>代码片</code>.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// An highlighted block</span><br><span class="hljs-keyword">var</span> foo = <span class="hljs-string">&#x27;bar&#x27;</span>;<br></code></pre></td></tr></table></figure><h2 id="生成一个适合你的列表"><a href="#生成一个适合你的列表" class="headerlink" title="生成一个适合你的列表"></a>生成一个适合你的列表</h2><ul><li>项目<ul><li>项目<ul><li>项目</li></ul></li></ul></li></ul><ol><li>项目1</li><li>项目2</li><li>项目3</li></ol><ul><li><input disabled="" type="checkbox"> 计划任务</li><li><input checked="" disabled="" type="checkbox"> 完成任务</li></ul><h2 id="创建一个表格"><a href="#创建一个表格" class="headerlink" title="创建一个表格"></a>创建一个表格</h2><p>一个简单的表格是这么创建的：</p><table><thead><tr><th>项目</th><th>Value</th></tr></thead><tbody><tr><td>电脑</td><td>$1600</td></tr><tr><td>手机</td><td>$12</td></tr><tr><td>导管</td><td>$1</td></tr></tbody></table><h3 id="设定内容居中、居左、居右"><a href="#设定内容居中、居左、居右" class="headerlink" title="设定内容居中、居左、居右"></a>设定内容居中、居左、居右</h3><p>使用<code>:---------:</code>居中<br>使用<code>:----------</code>居左<br>使用<code>----------:</code>居右</p><table><thead><tr><th align="center">第一列</th><th align="right">第二列</th><th align="left">第三列</th></tr></thead><tbody><tr><td align="center">第一列文本居中</td><td align="right">第二列文本居右</td><td align="left">第三列文本居左</td></tr></tbody></table><h3 id="SmartyPants"><a href="#SmartyPants" class="headerlink" title="SmartyPants"></a>SmartyPants</h3><p>SmartyPants将ASCII标点字符转换为“智能”印刷标点HTML实体。例如：</p><table><thead><tr><th>TYPE</th><th>ASCII</th><th>HTML</th></tr></thead><tbody><tr><td>Single backticks</td><td><code>&#39;Isn&#39;t this fun?&#39;</code></td><td>‘Isn’t this fun?’</td></tr><tr><td>Quotes</td><td><code>&quot;Isn&#39;t this fun?&quot;</code></td><td>“Isn’t this fun?”</td></tr><tr><td>Dashes</td><td><code>-- is en-dash, --- is em-dash</code></td><td>– is en-dash, — is em-dash</td></tr></tbody></table><h2 id="创建一个自定义列表"><a href="#创建一个自定义列表" class="headerlink" title="创建一个自定义列表"></a>创建一个自定义列表</h2><dl><dt>Markdown</dt><dd>Text-to-HTML conversion tool</dd></dl><dl><dt>Authors<br>:  John</dt><dd>Luke</dd></dl><h2 id="如何创建一个注脚"><a href="#如何创建一个注脚" class="headerlink" title="如何创建一个注脚"></a>如何创建一个注脚</h2><p>一个具有注脚的文本。<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="注脚的解释"><a href="https://mermaidjs.github.io/">2</a></span></a></sup></p><h2 id="注释也是必不可少的"><a href="#注释也是必不可少的" class="headerlink" title="注释也是必不可少的"></a>注释也是必不可少的</h2><p>Markdown将文本转换为 HTML。</p><p>*[HTML]:   超文本标记语言</p><h2 id="KaTeX数学公式"><a href="#KaTeX数学公式" class="headerlink" title="KaTeX数学公式"></a>KaTeX数学公式</h2><p>您可以使用渲染LaTeX数学表达式 <a href="https://khan.github.io/KaTeX/">KaTeX</a>:</p><p>Gamma公式展示 $\Gamma(n) &#x3D; (n-1)!\quad\forall<br>n\in\mathbb N$ 是通过欧拉积分</p><p>$$<br>\Gamma(z) &#x3D; \int_0^\infty t^{z-1}e^{-t}dt,.<br>$$</p><blockquote><p>你可以找到更多关于的信息 <strong>LaTeX</strong> 数学表达式<a href="http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference">here</a>.</p></blockquote><h2 id="新的甘特图功能，丰富你的文章"><a href="#新的甘特图功能，丰富你的文章" class="headerlink" title="新的甘特图功能，丰富你的文章"></a>新的甘特图功能，丰富你的文章</h2><pre><code class=" mermaid">gantt        dateFormat  YYYY-MM-DD        title Adding GANTT diagram functionality to mermaid        section 现有任务        已完成               :done,    des1, 2014-01-06,2014-01-08        进行中               :active,  des2, 2014-01-09, 3d        计划一               :         des3, after des2, 5d        计划二               :         des4, after des3, 5d</code></pre><ul><li>关于 <strong>甘特图</strong> 语法，参考 <a href="https://mermaidjs.github.io/">这儿</a>,</li></ul><h2 id="UML-图表"><a href="#UML-图表" class="headerlink" title="UML 图表"></a>UML 图表</h2><p>可以使用UML图表进行渲染。 <a href="https://mermaidjs.github.io/">Mermaid</a>. 例如下面产生的一个序列图：</p><pre><code class=" mermaid">sequenceDiagram张三 -&gt;&gt; 李四: 你好！李四, 最近怎么样?李四--&gt;&gt;王五: 你最近怎么样，王五？李四--x 张三: 我很好，谢谢!李四-x 王五: 我很好，谢谢!Note right of 王五: 李四想了很长时间, 文字太长了&lt;br/&gt;不适合放在一行.李四--&gt;&gt;张三: 打量着王五...张三-&gt;&gt;王五: 很好... 王五, 你怎么样?</code></pre><p>这将产生一个流程图。:</p><pre><code class=" mermaid">graph LRA[长方形] -- 链接 --&gt; B((圆))A --&gt; C(圆角长方形)B --&gt; D&#123;菱形&#125;C --&gt; D</code></pre><ul><li>关于 <strong>Mermaid</strong> 语法，参考 <a href="https://mermaidjs.github.io/">这儿</a>,</li></ul><h2 id="FLowchart流程图"><a href="#FLowchart流程图" class="headerlink" title="FLowchart流程图"></a>FLowchart流程图</h2><p>我们依旧会支持flowchart的流程图：</p><pre><code class=" mermaid">flowchatst=&gt;start: 开始e=&gt;end: 结束op=&gt;operation: 我的操作cond=&gt;condition: 确认？st-&gt;op-&gt;condcond(yes)-&gt;econd(no)-&gt;op</code></pre><ul><li>关于 <strong>Flowchart流程图</strong> 语法，参考 <a href="http://adrai.github.io/flowchart.js/">这儿</a>.</li></ul><h2 id="导出与导入"><a href="#导出与导入" class="headerlink" title="导出与导入"></a>导出与导入</h2><h3 id="导出"><a href="#导出" class="headerlink" title="导出"></a>导出</h3><p>如果你想尝试使用此编辑器, 你可以在此篇文章任意编辑。当你完成了一篇文章的写作, 在上方工具栏找到 <strong>文章导出</strong> ，生成一个.md文件或者.html文件进行本地保存。</p><h3 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h3><p>如果你想加载一篇你写过的.md文件，在上方工具栏可以选择导入功能进行对应扩展名的文件导入，<br>继续你的创作。</p><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://mermaidjs.github.io/">mermaid语法说明</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span>注脚的解释<a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    
    <tags>
      
      <tag>NOne</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/06/21/hello-world/"/>
    <url>/2023/06/21/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
