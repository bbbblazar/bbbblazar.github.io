<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>车道线检测</title>
    <link href="/2023/06/23/opencv%E8%BD%A6%E9%81%93%E7%BA%BF%E6%A3%80%E6%B5%8B/"/>
    <url>/2023/06/23/opencv%E8%BD%A6%E9%81%93%E7%BA%BF%E6%A3%80%E6%B5%8B/</url>
    
    <content type="html"><![CDATA[<p>本次学习内容是通过opencv的库函数来实现对一段视频车道线的检测。</p><h1 id="相机标定矫正畸变图像"><a href="#相机标定矫正畸变图像" class="headerlink" title="相机标定矫正畸变图像"></a>相机标定矫正畸变图像</h1><h2 id="相机标定"><a href="#相机标定" class="headerlink" title="相机标定"></a>相机标定</h2><p>将世界坐标系的坐标信息转到像素坐标系上，来确定空间3维几何位置与图像中对应点之间的关系。涉及变换的坐标系有世界坐标系，相机坐标系，图像坐标系，像素坐标系。</p><h3 id="世界坐标系到相机坐标系"><a href="#世界坐标系到相机坐标系" class="headerlink" title="世界坐标系到相机坐标系"></a>世界坐标系到相机坐标系</h3><p><img src="https://img-blog.csdnimg.cn/3a1811b63e6c404c8cb4a9f4b63b823f.png#pic_right" alt="Alt"><br>两个坐标系之间的变化为旋转和平移可以用旋转平移矩阵来表示：</p><p>$\begin{pmatrix}Xc \\ Yc \\ Zc \end{pmatrix}&#x3D;\begin{pmatrix}R &amp;t \\ 0 &amp; 1 \end{pmatrix}\cdot \begin{pmatrix}Xw \\ Yw \\ Zw \end{pmatrix}$<br>其中R为旋转矩阵，t为平移矩阵。</p><h3 id="相机坐标系到图像坐标系的变换"><a href="#相机坐标系到图像坐标系的变换" class="headerlink" title="相机坐标系到图像坐标系的变换"></a>相机坐标系到图像坐标系的变换</h3><p><img src="https://img-blog.csdnimg.cn/a767165021fe460b8355e60fa908a673.png#pic_right" alt="Alt"><br>由相似三角形可以得出关系:$\frac{f}{Zc}&#x3D;\frac{x}{Xc}&#x3D;\frac{y}{Yc}$<br>从而写出矩阵形式为：</p><p>$$Zc\begin{pmatrix}x \\ y \\ 1 \end{pmatrix}&#x3D;\begin{pmatrix}f &amp; 0 &amp;0 &amp;0 \ 0 &amp; f &amp; 0 &amp;0 \ 0 &amp; 0 &amp; 1 &amp; 0 \end{pmatrix}\cdot \begin{pmatrix}Xc \ Yc \ Zc \ 1 \end{pmatrix}$$<br>f为焦距。</p><h3 id="图像坐标系到像素坐标系"><a href="#图像坐标系到像素坐标系" class="headerlink" title="图像坐标系到像素坐标系"></a>图像坐标系到像素坐标系</h3><p><img src="https://img-blog.csdnimg.cn/7486717df2704c62820a1eb82575a2e6.png#pic_right" alt="Alt"><br>$\begin{pmatrix}u \ v \ 1 \end{pmatrix}&#x3D;\begin{pmatrix}\frac{x}{dx} &amp;0 &amp;u0 \ 0 &amp;\frac{y}{dy} &amp;v0 \ 0 &amp; 0 &amp; 1 \end{pmatrix}\cdot \begin{pmatrix}x \ y \ 1 \end{pmatrix}$</p><p>综上所述变化为：$Zc\begin{pmatrix}u \ v \ 1 \end{pmatrix}&#x3D;\begin{pmatrix}\frac{x}{dx} &amp;0 &amp;u0 \ 0 &amp;\frac{y}{dy} &amp;v0 \ 0 &amp; 0 &amp; 1 \end{pmatrix}\cdot\begin{pmatrix}f &amp; 0 &amp;0 &amp;0 \ 0 &amp; f &amp; 0 &amp;0 \ 0 &amp; 0 &amp; 1 &amp; 0 \end{pmatrix}\cdot \begin{pmatrix}R &amp;t \ 0 &amp; 1 \end{pmatrix}\cdot \begin{pmatrix}Xw \ Yw \ Zw \end{pmatrix}$</p><h3 id="畸变"><a href="#畸变" class="headerlink" title="畸变"></a>畸变</h3><p>由于透镜的影响使得图片会产生畸变（主要分为两大类切向与径向畸变）<br>切向：$x_{cor}&#x3D;x+2p_{1}xy+p_{2}(r^{2}+2x^{2}) y_{cor}&#x3D;y+2p_{2}xy+p_{1}(r^{2}+2y^{2})$<br>径向:$x_{cor}&#x3D;x(1+k_{1}r^{2}+k_{2}r^{4}+k_{3}r^{6}) y_{cor}&#x3D;y(1+k_{1}r^{2}+k_{2}r^{4}+k_{3}r^{6})$<br>接着就是将纠正后的点通过内参到像素平面上<br>$$<br>\left[<br>\begin{matrix}<br>1 &amp; 2 &amp; 3 \<br>4 &amp; 5 &amp; 6 \<br>7 &amp; 8 &amp; 9<br>\end{matrix} \right]\tag{2}<br>$$<br>$\begin{cases}a_1x+b_1y+c_1z&#x3D;d_1 \ a_2x+b_2y+c_2z&#x3D;d_2 \ a_3x+b_3y+c_3z&#x3D;d_3\end{cases}$</p><p>$\begin{cases}u&#x3D;f_{x}x_{cor}+u_{0} \ v&#x3D;f_{y}y_{cor}+v_{0}\end{cases}$</p><p>$\left {\begin{array}{c}a_1x+b_1y+c_1z&#x3D;d_1 \<br>a_2x+b_2y+c_2z&#x3D;d_2 \<br>a_3x+b_3y+c_3z&#x3D;d_3<br>\end{array}<br>\right .$</p><p>$\left{\begin{matrix}u&#x3D;f_{x}x_{cor}+u_{0} \\ v&#x3D;f_{y}y_{cor}+v_{0} \end{matrix}\right.$<br>其中fx为x&#x2F;dx，fy同理<br>本文通过opencv函数实现相机标定与畸变校正<br>通过不同角度拍摄的棋盘格来完成相机的标定，本文的棋盘格数据集为如下图所示<br><img src="https://img-blog.csdnimg.cn/4e95ab827b5d4bf3b783fa057840c07b.jpeg#pic_right" alt="Alt"></p><h3 id="代码实现矫正"><a href="#代码实现矫正" class="headerlink" title="代码实现矫正"></a>代码实现矫正</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">paths=glob.glob(<span class="hljs-string">r&#x27;../IR_camera_calib_img/ca*.jpg&#x27;</span>)<br></code></pre></td></tr></table></figure><p>由glob.glob（）函数获得20张棋盘位置，函数返回值用列表形式储存</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">ret,corners=cv2.findChessboardCorners(gray,(<span class="hljs-number">9</span>,<span class="hljs-number">6</span>),<span class="hljs-literal">None</span>)<br></code></pre></td></tr></table></figure><p>接下里用cv2.findChessboardCorners来找到棋盘格的内交点的像素坐标，由上图棋盘格能看出内角点为w&#x3D;9，h&#x3D;6 。</p><p>由于世界坐标能够自行进行设置，本文将世界坐标系的Z轴设为0。由此获得世界坐标系形式为（1,0,0），（2,0,0），（3,0,0）····为内交点的世界坐标用wld_object来保存，而通过cv2.findChessboardCorners获得的交点像素坐标系由img_object&#x3D;[]保存，下一步带入cv2.calibrateCamera（）来获得mtx是相机的内参矩阵；dist表述的相机畸变参数；rvecs表示旋转参数：；tvecs表示translation vectors，是平移参数。</p><p>最后通过cv2.undistort(img1,mtx,dis,None,mtx)来完成畸变校正</p><p>实现代码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs python">worldobject=np.zeros((<span class="hljs-number">9</span>*<span class="hljs-number">6</span>,<span class="hljs-number">3</span>),np.float32)<br>worldobject[:,:<span class="hljs-number">2</span>]=np.mgrid[<span class="hljs-number">0</span>:<span class="hljs-number">9</span>,<span class="hljs-number">0</span>:<span class="hljs-number">6</span>].T.reshape(-<span class="hljs-number">1</span>,<span class="hljs-number">2</span>)<br><br><span class="hljs-comment">#</span><br>wld_object=[]<br>img_object=[]<br>paths=glob.glob(<span class="hljs-string">r&#x27;../IR_camera_calib_img/ca*.jpg&#x27;</span>)<br><br><span class="hljs-comment">#plt.figure(figsize=(10, 6))</span><br><span class="hljs-comment">#print(paths)</span><br><span class="hljs-keyword">for</span> path <span class="hljs-keyword">in</span> paths:<br>    img= cv2.imread(path,flags=<span class="hljs-number">1</span>)<br>    gray=cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)<br><br>    <span class="hljs-comment">#找内角点</span><br>    ret,corners=cv2.findChessboardCorners(gray,(<span class="hljs-number">9</span>,<span class="hljs-number">6</span>),<span class="hljs-literal">None</span>)<br><br><br>    <span class="hljs-keyword">if</span> ret == <span class="hljs-literal">True</span>:<br>        wld_object.append(worldobject)<br>        img_object.append(corners)<br>        i+=<span class="hljs-number">1</span><br>        <span class="hljs-comment">#cv2.drawChessboardCorners(img,(11,8),corners,ret)</span><br>        <span class="hljs-comment">#cv2.imshow(&#x27;img&#x27;,img)</span><br>        <span class="hljs-comment">#plt.subplot(3,6,i)</span><br>        <span class="hljs-comment">#plt.imshow(img)</span><br>        <span class="hljs-comment">#cv2.waitKey(0)</span><br>        <span class="hljs-comment">#cv2.destroyAllWindows()</span><br><span class="hljs-comment">#plt.show()</span><br><br><span class="hljs-comment">#img1=cv2.imread(&#x27;100000.png&#x27;)</span><br>ret,mtx,dis,rvecs,tvecs=cv2.calibrateCamera(wld_object,img_object,gray.shape[::-<span class="hljs-number">1</span>],<span class="hljs-literal">None</span>,<span class="hljs-literal">None</span>)<br><br><br><span class="hljs-comment">#校正</span><br>img1=cv2.imread(<span class="hljs-string">&#x27;straight_lines1.jpg&#x27;</span>,)<br>cv2.imshow(<span class="hljs-string">&#x27;o&#x27;</span>,img1)<br>dst=cv2.undistort(img1,mtx,dis,<span class="hljs-literal">None</span>,mtx)<br>cv2.imshow(<span class="hljs-string">&#x27;d&#x27;</span>,dst)<br>cv2.waitKey(<span class="hljs-number">0</span>)<br>cv2.imwrite(<span class="hljs-string">&#x27;correct.jpg&#x27;</span>,dst)<br>cv2.destroyAllWindows()<br></code></pre></td></tr></table></figure><p>实现结果<br><img src="https://img-blog.csdnimg.cn/9d0cb6453a2c4b84bba760f707390b20.jpeg#pic_right" alt="Alt"><br><img src="https://img-blog.csdnimg.cn/e3ffb9c039324218ba0c35ca8f8e1735.jpeg#pic_right" alt="Alt"></p><h1 id="透视变化为了展现出感兴趣的区域（车道线区域）"><a href="#透视变化为了展现出感兴趣的区域（车道线区域）" class="headerlink" title="透视变化为了展现出感兴趣的区域（车道线区域）"></a>透视变化为了展现出感兴趣的区域（车道线区域）</h1><p>在原图中车道线区域可以认为一个梯形，现在要把这个区域变成我们俯视时看到的场景便于车道线接下来的识别操作本文选取<br>scr&#x3D;np.float32([[575,460],[700,460],[1096,720],[200,720]])<br>dst&#x3D;np.float32([[200,0],[950,0],[950,720],[200,720]])<br>scr可以认为原图中的梯形区域dst可以认为我们俯视车道线是的矩形区域通过cv2.getPerspectiveTransform()来获得变换矩阵<br>再带入cv2.warpPerspective(img,M,(w,h),flags&#x3D;cv2.INTER_LINEAR)完成透视变换。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> cv2<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><br>img=cv2.imread(<span class="hljs-string">&#x27;correct.jpg&#x27;</span>)<br>h,w=img.shape[:<span class="hljs-number">2</span>]<br>scr=np.float32([[<span class="hljs-number">575</span>,<span class="hljs-number">460</span>],[<span class="hljs-number">700</span>,<span class="hljs-number">460</span>],[<span class="hljs-number">1096</span>,<span class="hljs-number">720</span>],[<span class="hljs-number">200</span>,<span class="hljs-number">720</span>]])<br>dst=np.float32([[<span class="hljs-number">200</span>,<span class="hljs-number">0</span>],[<span class="hljs-number">950</span>,<span class="hljs-number">0</span>],[<span class="hljs-number">950</span>,<span class="hljs-number">720</span>],[<span class="hljs-number">200</span>,<span class="hljs-number">720</span>]])<br>M=cv2.getPerspectiveTransform(scr,dst,<span class="hljs-literal">None</span>)<br>Minv=cv2.getPerspectiveTransform(dst,scr,<span class="hljs-literal">None</span>)<br>img1=cv2.warpPerspective(img,M,(w,h),flags=cv2.INTER_LINEAR)<br>plt.figure(figsize=(<span class="hljs-number">10</span>,<span class="hljs-number">6</span>))<br>plt.subplot(<span class="hljs-number">121</span>),plt.imshow(img)<br>plt.subplot(<span class="hljs-number">122</span>),plt.imshow(img1)<br>plt.show()<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/0530e13d7e584d0faf81dce652a48098.jpeg#pic_right" alt="Alt"></p><h1 id="通过hls图像提取白色车道线，通过lab图像提取黄色车道线"><a href="#通过hls图像提取白色车道线，通过lab图像提取黄色车道线" class="headerlink" title="通过hls图像提取白色车道线，通过lab图像提取黄色车道线"></a>通过hls图像提取白色车道线，通过lab图像提取黄色车道线</h1><p>接下来第三步开始识别车道线，由于车道线是黄色和白色，现在目的是将黄色线和白色线分别提出来最后在组合在一张图上完成检测</p><p>首先是通过HSL颜色空间提取出白色车线</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python">hls=cv2.cvtColor(img1,cv2.COLOR_BGR2HLS)<br>lab=cv2.cvtColor(img1,cv2.COLOR_BGR2Lab)<br><br><span class="hljs-comment">#print(hls)</span><br>L_channel=hls[:,:,<span class="hljs-number">1</span>]<br>L_channel=L_channel*(<span class="hljs-number">255</span>/np.<span class="hljs-built_in">max</span>(L_channel))<br>h,w=L_channel.shape[:<span class="hljs-number">2</span>]<br><br>binary_out=np.zeros_like(L_channel)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(h):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(w):<br>        <span class="hljs-keyword">if</span> L_channel[i][j]&gt;=<span class="hljs-number">220</span> <span class="hljs-keyword">and</span> L_channel[i][j]&lt;=<span class="hljs-number">255</span>:<br>            binary_out[i][j]=<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/94704dcc0f1b4939babecd72c55f81cf.jpeg#pic_right" alt="Alt"><br><img src="https://img-blog.csdnimg.cn/c76f971d73ea49be9a2386da0950a0b1.jpeg#pic_right" alt="Alt"><br><img src="https://img-blog.csdnimg.cn/1e625b44409247a6aee7e93ea47feab6.jpeg#pic_right" alt="Alt"><br>再通过Lab颜色空间提取黄色车道线</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">b_channel=lab[:,:,<span class="hljs-number">2</span>]<br><span class="hljs-keyword">if</span> b_channel.<span class="hljs-built_in">max</span>()&gt;<span class="hljs-number">100</span>:<br>    b_channel=b_channel*(<span class="hljs-number">255</span>/np.<span class="hljs-built_in">max</span>(b_channel))<br>lab_binary=np.zeros_like(b_channel)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(h):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(w):<br>        <span class="hljs-keyword">if</span> b_channel[i][j]&gt;=<span class="hljs-number">195</span> <span class="hljs-keyword">and</span> b_channel[i][j]&lt;=<span class="hljs-number">255</span>:<br>            lab_binary[i][j]=<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/21b5a90fa9b44162afece902d1ee1642.jpeg#pic_right" alt="Alt"><br><img src="https://img-blog.csdnimg.cn/5c0ba3d418974d9e978bdbabc9832916.jpeg#pic_right" alt="Alt"><br><img src="https://img-blog.csdnimg.cn/b2696188660246d4b1f3367f853799f7.jpeg#pic_right" alt="Alt"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">out=np.zeros_like(lab_binary)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(h):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(w):<br>        <span class="hljs-keyword">if</span> binary_out[i][j]==<span class="hljs-number">1</span> <span class="hljs-keyword">or</span> lab_binary[i][j]==<span class="hljs-number">1</span>:<br>            out[i][j]=<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/529225946060404c9d468113d96e85b5.jpeg#pic_right" alt="Alt"><br><img src="https://img-blog.csdnimg.cn/f1542c6eef234c25a9d7c20a5e136f6d.jpeg#pic_right" alt="Alt"><br><img src="https://img-blog.csdnimg.cn/529225946060404c9d468113d96e85b5.jpeg#pic_right" alt="Alt"></p><h1 id="使用滑动窗口来识别车道线"><a href="#使用滑动窗口来识别车道线" class="headerlink" title="使用滑动窗口来识别车道线"></a>使用滑动窗口来识别车道线</h1><p>接下来是滑动窗口识别车道线<br>经过提取车道线后，可以的到非黑即白的二值化图像，可以利用直方图统计的方法来确定车道线在图像上的位置如下直方图所示横轴为图像水平坐标系，纵轴为像素个数<br><img src="https://img-blog.csdnimg.cn/511c8c50692c4d11979bda1e8fa4c73d.jpeg#pic_right" alt="Alt"><br><img src="https://img-blog.csdnimg.cn/99cfd7a6127c421bb780f86d13f956c8.jpeg#pic_right" alt="Alt"><br>实现代码<br>直方图统计是由np.sum（）axis&#x3D;0是压缩行，每一列的进行相加</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">histogram = np.<span class="hljs-built_in">sum</span>(out[:,:], axis=<span class="hljs-number">0</span>)<br>x=np.arange(<span class="hljs-number">1280</span>)<br>plt.plot(x,histogram, linewidth=<span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure><h1 id="使用滑动窗口来识别车道线-1"><a href="#使用滑动窗口来识别车道线-1" class="headerlink" title="使用滑动窗口来识别车道线"></a>使用滑动窗口来识别车道线</h1><p>接下来就是实现滑动窗口，首先定义窗口大小本次实验采用9个窗口那么高度为img.shape[0]&#x2F;9</p><p>再找到图像中车道线最大值处（使用np.argmax），leftx_base,与rightx_base分别为第一个窗口的中点，将宽度设成100得到一个宽200高80的窗口。</p><p>接下来开始遍历图像寻找非0且的像素点，通过nonzero实现将其索引值保存在left_lane_inds（左车道线）右车道线同理</p><p>在寻找的过程中，如果非0的像素点超过一定的阈值那么将窗口中心点坐标改变。</p><p>以上就是滑动窗口的实现</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs python">leftx_base = np.argmax(histogram[:midpoint])<br>rightx_base = np.argmax(histogram[midpoint:]) + midpoint<br><span class="hljs-comment">#窗口</span><br>windows=<span class="hljs-number">9</span><br>windows_height=out.shape[<span class="hljs-number">0</span>]//windows<br>margin=<span class="hljs-number">100</span><br>minpix=<span class="hljs-number">50</span><br><span class="hljs-comment">#统计</span><br>nonzero=out.nonzero()<br>nonzeroy=np.array(nonzero[<span class="hljs-number">0</span>])<br>nonzerox=np.array(nonzero[<span class="hljs-number">1</span>])<br><br>Left_lane_inds=[]<br>Right_lane_inds=[]<br>leftx_current = leftx_base<br>rightx_current = rightx_base<br><br><span class="hljs-keyword">for</span> window <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(windows):<br>    win_y_low=out.shape[<span class="hljs-number">0</span>]-(window+<span class="hljs-number">1</span>)*windows_height<br>    win_y_high = out.shape[<span class="hljs-number">0</span>] - window  * windows_height<br>    win_xleft_low= leftx_current-margin<br>    win_xleft_high = leftx_current + margin<br>    win_xright_low = rightx_current - margin<br>    win_xright_high = rightx_current + margin<br><br>    <span class="hljs-comment">#Draw</span><br>    cv2.rectangle(out_img,(win_xleft_low,win_y_low),(win_xleft_high,win_y_high),[<span class="hljs-number">0</span>,<span class="hljs-number">255</span>,<span class="hljs-number">0</span>],<span class="hljs-number">2</span>)<br>    cv2.rectangle(out_img, (win_xright_low, win_y_low), (win_xright_high, win_y_high), [<span class="hljs-number">0</span>, <span class="hljs-number">255</span>, <span class="hljs-number">0</span>], <span class="hljs-number">2</span>)<br><br>    good_left_inds =((nonzerox&gt;=win_xleft_low)&amp;(nonzerox&lt;win_xleft_high)&amp;(nonzeroy&gt;=win_y_low)&amp;(nonzeroy&lt;win_y_high)).nonzero()[<span class="hljs-number">0</span>]<br>    good_right_inds =((nonzerox&gt;=win_xright_low)&amp;(nonzerox&lt;win_xright_high)&amp;(nonzeroy&gt;=win_y_low)&amp;(nonzeroy&lt;win_y_high)).nonzero()[<span class="hljs-number">0</span>]<br><br>    Left_lane_inds.append(good_left_inds)<br>    Right_lane_inds.append(good_right_inds)<br><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(good_left_inds)&gt;minpix:leftx_current = np.int32(np.mean(nonzerox[good_left_inds]))<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(good_right_inds) &gt; minpix: rightx_current = np.int32(np.mean(nonzerox[good_right_inds]))<br><br>Left_lane_inds=np.concatenate(Left_lane_inds)<br>Right_lane_inds=np.concatenate(Right_lane_inds)<br><br>lefttx=nonzerox[Left_lane_inds]<br>leftty=nonzeroy[Left_lane_inds]<br>righttx=nonzerox[Right_lane_inds]<br>rightty=nonzeroy[Right_lane_inds]<br><br><br>left_fit=np.polyfit(leftty,lefttx,<span class="hljs-number">2</span>)<br>right_fit=np.polyfit(rightty,righttx,<span class="hljs-number">2</span>)<br><br>ploty=np.linspace(<span class="hljs-number">0</span>,out.shape[<span class="hljs-number">0</span>]-<span class="hljs-number">1</span>,out.shape[<span class="hljs-number">0</span>])<br>left_fitx=left_fit[<span class="hljs-number">0</span>]*ploty**<span class="hljs-number">2</span>+ploty*left_fit[<span class="hljs-number">1</span>]+left_fit[<span class="hljs-number">2</span>]<br>right_fitx=right_fit[<span class="hljs-number">0</span>]*ploty**<span class="hljs-number">2</span>+ploty*right_fit[<span class="hljs-number">1</span>]+right_fit[<span class="hljs-number">2</span>]<br>out_img[leftty, lefttx] = [<span class="hljs-number">255</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]<br>out_img[rightty, righttx] = [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">255</span>]<br><br><span class="hljs-comment">#plt.plot(left_fitx, ploty,  linewidth=2)</span><br><span class="hljs-comment">#plt.plot(right_fitx, ploty,  linewidth=2)</span><br><br>plt.subplot(<span class="hljs-number">121</span>),plt.imshow(img1,<span class="hljs-string">&#x27;gray&#x27;</span>)<br>plt.subplot(<span class="hljs-number">122</span>),plt.imshow(out_img,<span class="hljs-string">&#x27;gray&#x27;</span>)<br>plt.show()<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/e8816c6fb342469893b8cb2b4ec08f72.jpeg#pic_right" alt="Alt"></p><h1 id="二项式拟合求出车道线曲线"><a href="#二项式拟合求出车道线曲线" class="headerlink" title="二项式拟合求出车道线曲线"></a>二项式拟合求出车道线曲线</h1><p>接着通过上一步得到的非0点的索引值（即像素的横纵坐标）来进行二项式多项式拟合得到下图<br>二次函数表示为y&#x3D;ax**2+bx+c使用函数np.polyfit()带入坐标值返回[a,b,c]二次函数三个系数，而ploty可以认为表示的是自变量通过np.linspace得到<br><img src="https://img-blog.csdnimg.cn/180539bf8fef461e912a3f4630758048.jpeg#pic_right" alt="Alt"><br>通过上述得到的二次项系数在图像中分别获得二次项曲线的坐标（x,y）分别用pts_left与pts_right保存，通过cv2.fillpoly填充车道线之间颜色最后逆投影到原图像上</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">ploty=np.linspace(<span class="hljs-number">0</span>,binary_warped.shape[<span class="hljs-number">0</span>]-<span class="hljs-number">1</span>,binary_warped.shape[<span class="hljs-number">0</span>])<br>   left_fitx = left_fit[<span class="hljs-number">0</span>] * ploty ** <span class="hljs-number">2</span> + left_fit[<span class="hljs-number">1</span>] * ploty + left_fit[<span class="hljs-number">2</span>]<br>   right_fitx = right_fit[<span class="hljs-number">0</span>] * ploty ** <span class="hljs-number">2</span> + right_fit[<span class="hljs-number">1</span>] * ploty + right_fit[<span class="hljs-number">2</span>]<br>   warp_zero = np.zeros_like(binary_warped).astype(np.uint8)<br>   color_warp=np.dstack((warp_zero,warp_zero,warp_zero))<br>   pts_left = np.array([np.transpose(np.vstack([left_fitx, ploty]))])<br>   pts_right = np.array([np.flipud(np.transpose(np.vstack([right_fitx, ploty])))])<br>   pts = np.hstack((pts_left, pts_right))<br>   cv2.fillPoly(color_warp,np.int_([pts]),(<span class="hljs-number">0</span>,<span class="hljs-number">255</span>,<span class="hljs-number">0</span>))<br><br>   newwarp=cv2.warpPerspective(color_warp, Minv, (undist.shape[<span class="hljs-number">1</span>], undist.shape[<span class="hljs-number">0</span>]))<br>   result = cv2.addWeighted(undist, <span class="hljs-number">1</span>, newwarp, <span class="hljs-number">0.3</span>, <span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/3993eab06fb84f67ba100948f9cae662.jpeg#pic_right" alt="Alt"></p><h1 id="求出曲率半径和偏离位置"><a href="#求出曲率半径和偏离位置" class="headerlink" title="求出曲率半径和偏离位置"></a>求出曲率半径和偏离位置</h1><p>还有曲率半径和偏离位置的求取</p><p>由于是二次函数y&#x3D;ax**2+bx+c可以由公式求得曲率半径为<br>$$(1+{y}’^{2})^{1.5}\over{y}’’$$<br>而偏离位置为车道线之间的距离与图像中心距离之差</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python">ploty = np.linspace(<span class="hljs-number">0</span>, binary_warped.shape[<span class="hljs-number">0</span>] - <span class="hljs-number">1</span>, binary_warped.shape[<span class="hljs-number">0</span>])<br>leftx = left_fit[<span class="hljs-number">0</span>] * ploty ** <span class="hljs-number">2</span> + left_fit[<span class="hljs-number">1</span>] * ploty + left_fit[<span class="hljs-number">2</span>]<br>rightx = right_fit[<span class="hljs-number">0</span>] * ploty ** <span class="hljs-number">2</span> + right_fit[<span class="hljs-number">1</span>] * ploty + right_fit[<span class="hljs-number">2</span>]<br><br>ym_per_pix = <span class="hljs-number">30</span> / <span class="hljs-number">720</span>  <span class="hljs-comment"># meters per pixel in y dimension</span><br>xm_per_pix = <span class="hljs-number">3.7</span> / <span class="hljs-number">700</span>  <span class="hljs-comment"># meters per pixel in x dimension</span><br>y_eval = np.<span class="hljs-built_in">max</span>(ploty)<br>left_cur_fit=np.polyfit(ploty*ym_per_pix,leftx*xm_per_pix,<span class="hljs-number">2</span>)<br>right_cur_fit=np.polyfit(ploty*ym_per_pix,rightx*xm_per_pix,<span class="hljs-number">2</span>)<br><br>left_curverad=((<span class="hljs-number">1</span> + (<span class="hljs-number">2</span>*left_cur_fit[<span class="hljs-number">0</span>]*y_eval*ym_per_pix + left_cur_fit[<span class="hljs-number">1</span>])**<span class="hljs-number">2</span>)**<span class="hljs-number">1.5</span>) / np.absolute(<span class="hljs-number">2</span>*left_cur_fit[<span class="hljs-number">0</span>])<br>right_curverad=((<span class="hljs-number">1</span> + (<span class="hljs-number">2</span>*right_cur_fit[<span class="hljs-number">0</span>]*y_eval*ym_per_pix + right_cur_fit[<span class="hljs-number">1</span>])**<span class="hljs-number">2</span>)**<span class="hljs-number">1.5</span>) / np.absolute(<span class="hljs-number">2</span>*right_cur_fit[<span class="hljs-number">0</span>])<br>curverad=(left_curverad+right_curverad)/<span class="hljs-number">2.</span><br><span class="hljs-comment">#</span><br>lane_width=np.absolute(leftx[<span class="hljs-number">719</span>]-rightx[<span class="hljs-number">719</span>])<br>lane_xm_per_pix=<span class="hljs-number">3.7</span>/lane_width<br>veh_pos=(leftx[<span class="hljs-number">719</span>]+rightx[<span class="hljs-number">719</span>])*lane_xm_per_pix/<span class="hljs-number">2.</span><br>cen_pos=binary_warped.shape[<span class="hljs-number">1</span>]*lane_xm_per_pix/<span class="hljs-number">2.</span><br>distance_from_center=np.absolute(cen_pos-veh_pos)<br></code></pre></td></tr></table></figure><h1 id="逆投影到原图上"><a href="#逆投影到原图上" class="headerlink" title="逆投影到原图上"></a>逆投影到原图上</h1><p><img src="https://img-blog.csdnimg.cn/e75c2ace4fed46f9821e94f4bcebb727.jpeg#pic_right" alt="Alt"></p><h1 id="显示检测过程"><a href="#显示检测过程" class="headerlink" title="显示检测过程"></a>显示检测过程</h1><p>最终实现视频</p><p>[video(video-koGx9pDC-1687454945592)(type-csdn)(url-<a href="https://live.csdn.net/v/embed/295810)(image-https://video-community.csdnimg.cn/vod-84deb4/9f46b0a0ee5e71ed80656733a68f0102/snapshots/6635cdfefbe84296bac924e1db81ea96-00004.jpg?auth_key=4837232580-0-0-1fcf4868a78a2b3eb72885d7948978f6)(title-%E8%BD%A6%E9%81%93%E7%BA%BF%E6%A3%80%E6%B5%8B)%5D">https://live.csdn.net/v/embed/295810)(image-https://video-community.csdnimg.cn/vod-84deb4/9f46b0a0ee5e71ed80656733a68f0102/snapshots/6635cdfefbe84296bac924e1db81ea96-00004.jpg?auth_key=4837232580-0-0-1fcf4868a78a2b3eb72885d7948978f6)(title-车道线检测)]</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>一个标签</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ts</title>
    <link href="/2023/06/21/ts/"/>
    <url>/2023/06/21/ts/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Markdown</title>
    <link href="/2023/06/21/Markdown/"/>
    <url>/2023/06/21/Markdown/</url>
    
    <content type="html"><![CDATA[<h1 id="Markdown-标题"><a href="#Markdown-标题" class="headerlink" title="Markdown 标题"></a>Markdown 标题</h1><p>下面是使用Markdown设置标题(几号标题)</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs clean"># 一级（注意#后面要有空格）<br>## 二级<br>### 三级<br>#### 四级<br>##### 五级<br>###### 六级<br></code></pre></td></tr></table></figure><h1 id="Markdown-段落"><a href="#Markdown-段落" class="headerlink" title="Markdown 段落"></a>Markdown 段落</h1><h2 id="换行"><a href="#换行" class="headerlink" title="换行"></a>换行</h2><p>进行段落的换行操作有</p><p>1.进行两次换行<br>2.空格2次再换行</p><h2 id="Markdown-字体"><a href="#Markdown-字体" class="headerlink" title="Markdown 字体"></a>Markdown 字体</h2><p>如下所示: </p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">*斜体文本*<span class="hljs-params">-----------</span>（一个*号是斜体）<br><br>_斜体文本_<span class="hljs-params">-----------</span>（一个下划是斜体）<br><br>**粗体文本**<span class="hljs-params">---------</span>（两个*号是粗体）<br><br>__粗体文本__<span class="hljs-params">---------</span>（两个下划是粗体）<br><br>***粗斜体文本***<span class="hljs-params">-----</span>（三个*号是粗斜）<br><br>___粗斜体文本___<span class="hljs-params">-----</span>（三个下划是粗斜）<br><br>~~删除线文本~~<span class="hljs-params">-------</span>（两个波浪是删除）<br><br>&lt;u&gt;下划线文本&lt;<span class="hljs-string">/u</span>&gt;<span class="hljs-params">----</span>（一个u符是下划）<br><br>创建一个脚注<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="阿巴阿巴[//]: # (注释文本，不会在浏览器中显示。)[^_^]: # (注释文本，不会在浏览器中显示。)">[1]</span></a></sup><br><br># Markdown 列表共有三种列表## 有序列表就是用数字加.的方式<hexoPostRenderCodeBlock><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">1.</span> 这样<br><span class="hljs-bullet">2.</span> 表示<br><span class="hljs-bullet">3.</span> .是在英文输入法下且之后内容前有个空格<br></code></pre></td></tr></table></figure><h2 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h2><p>使用了+（加号），-（减号），<em>（</em>号）；</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">*</span> 听话的便当<br><br><span class="hljs-bullet">*</span> 听话的便当<br><br><span class="hljs-bullet">*</span> 听话的便当<br><br><span class="hljs-bullet">+</span> 注意<br><br><span class="hljs-bullet">+</span> 注意<br><br><span class="hljs-bullet">+</span> 注意<br><br><span class="hljs-bullet">-</span> 符号后加空格<br><br><span class="hljs-bullet">-</span> 符号后加空格<br><br><span class="hljs-bullet">-</span> 符号后加空格<br></code></pre></td></tr></table></figure><p>输出为：一个点加内容</p><h2 id="嵌套列表"><a href="#嵌套列表" class="headerlink" title="嵌套列表"></a>嵌套列表</h2><h3 id="有序嵌套列表"><a href="#有序嵌套列表" class="headerlink" title="有序嵌套列表"></a>有序嵌套列表</h3><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-number">1</span>. 听话的便当<br>    - 听话的便当<br>    - 听话的便当<br><span class="hljs-number">2</span>. 注意空格<br>    + 空格<br>    + 空格<br><span class="hljs-number">3</span>. <span class="hljs-string">&quot;-&quot;</span>，<span class="hljs-string">&quot;*&quot;</span>和<span class="hljs-string">&quot;+&quot;</span>前面有四个空格<br>    * <span class="hljs-string">&quot;-&quot;</span>，<span class="hljs-string">&quot;*&quot;</span>和<span class="hljs-string">&quot;+&quot;</span>前面有四个空格<br>    * <span class="hljs-string">&quot;-&quot;</span>，<span class="hljs-string">&quot;*&quot;</span>和<span class="hljs-string">&quot;+&quot;</span>前面有四个空格<br></code></pre></td></tr></table></figure><h3 id="无序嵌套列表"><a href="#无序嵌套列表" class="headerlink" title="无序嵌套列表"></a>无序嵌套列表</h3><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs 1c">- 就是把数字换成符号<br>    - 就是把数字换成符号<br>    - 就是把数字换成符号<br>+ 注意空格<br>    + 空格<br>    + 空格<br>* <span class="hljs-string">&quot;-&quot;</span>，<span class="hljs-string">&quot;*&quot;</span>和<span class="hljs-string">&quot;+&quot;</span>前面有四个空格<br>    * <span class="hljs-string">&quot;-&quot;</span>，<span class="hljs-string">&quot;*&quot;</span>和<span class="hljs-string">&quot;+&quot;</span>前面有四个空格<br>    * <span class="hljs-string">&quot;-&quot;</span>，<span class="hljs-string">&quot;*&quot;</span>和<span class="hljs-string">&quot;+&quot;</span>前面有四个空格<br></code></pre></td></tr></table></figure><h1 id="Markdown-区块"><a href="#Markdown-区块" class="headerlink" title="Markdown 区块"></a>Markdown 区块</h1><figure class="highlight node-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs node-repl"><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">听话的便当</span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript"><span class="hljs-title class_">Markdown</span></span><br><span class="hljs-meta prompt_">&gt;</span> <span class="language-javascript">区块</span><br></code></pre></td></tr></table></figure><p>区块里可以使用列表，列表里可以使用区块</p><h1 id="Markdown-代码"><a href="#Markdown-代码" class="headerlink" title="Markdown 代码"></a>Markdown 代码</h1><h1 id="Markdown-链接"><a href="#Markdown-链接" class="headerlink" title="Markdown 链接"></a>Markdown 链接</h1><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk">这是[听话的便当](https:<span class="hljs-regexp">//</span>www/thdbd.gitbook.io)的网站<br><br>或者<br><br>这是听话的便当的网站 &lt;https:<span class="hljs-regexp">//</span>www.thdbd.gitbook.io&gt; <br>[<span class="hljs-regexp">//</span>]: <span class="hljs-comment"># (直接显示链接)</span><br></code></pre></td></tr></table></figure><p>或者像论文文献一样</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs less">这是我的<span class="hljs-selector-attr">[网站]</span><span class="hljs-selector-attr">[1]</span><br><br>这是我的<span class="hljs-selector-attr">[第二个网站]</span><span class="hljs-selector-attr">[2]</span><br><br>······<br><br>这是我的<span class="hljs-selector-attr">[网站]</span><span class="hljs-selector-attr">[1]</span><br><br>这是我的<span class="hljs-selector-attr">[第二个网站]</span><span class="hljs-selector-attr">[2]</span><br><br><span class="hljs-selector-attr">[1]</span>: <span class="hljs-selector-tag">https</span>:<span class="hljs-comment">//www.github.io/</span><br><span class="hljs-selector-attr">[2]</span>: <span class="hljs-selector-tag">https</span>:<span class="hljs-comment">//www.gitbook.io/</span><br></code></pre></td></tr></table></figure><h1 id="Markdown-表格"><a href="#Markdown-表格" class="headerlink" title="Markdown 表格"></a>Markdown 表格</h1><p>Markdown 表格使用 | 来分隔不同的单元格；<br>使用 - 来分隔表头和其他行；<br>例如：</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">|<span class="hljs-string">  thdbd  </span>|<span class="hljs-string">  thdbd  </span>|<br>|<span class="hljs-string">  -----  </span>|<span class="hljs-string">  -----  </span>|<br>|<span class="hljs-string">   123   </span>|<span class="hljs-string">   456   </span>|<br>|<span class="hljs-string">   321   </span>|<span class="hljs-string">   654   </span>|<br><br><br>```  <br>也可以设计一下表格内文字的居中方式：<br>-: 设置内容和标题栏居右对齐。<br>:- 设置内容和标题栏居左对齐。<br>:-: 设置内容和标题栏居中对齐。<br><br><br>例如：<br><br><br></code></pre></td></tr></table></figure><table><thead><tr><th align="center">thdbd</th><th align="center">thdbd</th></tr></thead><tbody><tr><td align="center">123</td><td align="center">456</td></tr><tr><td align="center">321</td><td align="center">654</td></tr></tbody></table><pre><code class="hljs">&lt;section class=&quot;footnotes&quot;&gt;&lt;div class=&quot;footnote-list&quot;&gt;&lt;ol&gt;&lt;li&gt;&lt;span id=&quot;fn:1&quot; class=&quot;footnote-text&quot;&gt;&lt;span&gt;阿巴阿巴&lt;br&gt;&lt;br&gt;[&lt;span class=&quot;hljs-string&quot;&gt;&amp;#x2F;&amp;#x2F;&lt;/span&gt;]: &lt;span class=&quot;hljs-comment&quot;&gt;# (注释文本，不会在浏览器中显示。)&lt;/span&gt;&lt;br&gt;&lt;br&gt;[^_^]: &lt;span class=&quot;hljs-comment&quot;&gt;# (注释文本，不会在浏览器中显示。)&lt;/span&gt;&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/hexoPostRenderCodeBlock&gt;&lt;a href=&quot;#fnref:1&quot; rev=&quot;footnote&quot; class=&quot;footnote-backref&quot;&gt; ↩&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;&lt;/section&gt;</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>一个标签</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Markdown实例</title>
    <link href="/2023/06/21/Markdown%E5%AE%9E%E4%BE%8B/"/>
    <url>/2023/06/21/Markdown%E5%AE%9E%E4%BE%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="欢迎使用Markdown编辑器"><a href="#欢迎使用Markdown编辑器" class="headerlink" title="欢迎使用Markdown编辑器"></a>欢迎使用Markdown编辑器</h1><p>你好！ 这是你第一次使用 <strong>Markdown编辑器</strong> 所展示的欢迎页。如果你想学习如何使用Markdown编辑器, 可以仔细阅读这篇文章，了解一下Markdown的基本语法知识。</p><h2 id="新的改变"><a href="#新的改变" class="headerlink" title="新的改变"></a>新的改变</h2><p>我们对Markdown编辑器进行了一些功能拓展与语法支持，除了标准的Markdown编辑器功能，我们增加了如下几点新功能，帮助你用它写博客：</p><ol><li><strong>全新的界面设计</strong> ，将会带来全新的写作体验；</li><li>在创作中心设置你喜爱的代码高亮样式，Markdown <strong>将代码片显示选择的高亮样式</strong> 进行展示；</li><li>增加了 <strong>图片拖拽</strong> 功能，你可以将本地的图片直接拖拽到编辑区域直接展示；</li><li>全新的 <strong>KaTeX数学公式</strong> 语法；</li><li>增加了支持<strong>甘特图的mermaid语法<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="[mermaid语法说明](https://mermaidjs.github.io/)"><a href="http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference">1</a></span></a></sup></strong> 功能；</li><li>增加了 <strong>多屏幕编辑</strong> Markdown文章功能；</li><li>增加了 <strong>焦点写作模式、预览模式、简洁写作模式、左右区域同步滚轮设置</strong> 等功能，功能按钮位于编辑区域与预览区域中间；</li><li>增加了 <strong>检查列表</strong> 功能。</li></ol><h2 id="功能快捷键"><a href="#功能快捷键" class="headerlink" title="功能快捷键"></a>功能快捷键</h2><p>撤销：<kbd>Ctrl/Command</kbd> + <kbd>Z</kbd><br>重做：<kbd>Ctrl/Command</kbd> + <kbd>Y</kbd><br>加粗：<kbd>Ctrl/Command</kbd> + <kbd>B</kbd><br>斜体：<kbd>Ctrl/Command</kbd> + <kbd>I</kbd><br>标题：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>H</kbd><br>无序列表：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>U</kbd><br>有序列表：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>O</kbd><br>检查列表：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>C</kbd><br>插入代码：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>K</kbd><br>插入链接：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>L</kbd><br>插入图片：<kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>G</kbd><br>查找：<kbd>Ctrl/Command</kbd> + <kbd>F</kbd><br>替换：<kbd>Ctrl/Command</kbd> + <kbd>G</kbd></p><h2 id="合理的创建标题，有助于目录的生成"><a href="#合理的创建标题，有助于目录的生成" class="headerlink" title="合理的创建标题，有助于目录的生成"></a>合理的创建标题，有助于目录的生成</h2><p>直接输入1次<kbd>#</kbd>，并按下<kbd>space</kbd>后，将生成1级标题。<br>输入2次<kbd>#</kbd>，并按下<kbd>space</kbd>后，将生成2级标题。<br>以此类推，我们支持6级标题。有助于使用<code>TOC</code>语法后生成一个完美的目录。</p><h2 id="如何改变文本的样式"><a href="#如何改变文本的样式" class="headerlink" title="如何改变文本的样式"></a>如何改变文本的样式</h2><p><em>强调文本</em> <em>强调文本</em></p><p><strong>加粗文本</strong> <strong>加粗文本</strong></p><p>&#x3D;&#x3D;标记文本&#x3D;&#x3D;</p><p><del>删除文本</del></p><blockquote><p>引用文本</p></blockquote><p>H<del>2</del>O is是液体。</p><p>2^10^ 运算结果是 1024.</p><h2 id="插入链接与图片"><a href="#插入链接与图片" class="headerlink" title="插入链接与图片"></a>插入链接与图片</h2><p>链接: <a href="https://www.csdn.net/">link</a>.</p><p>图片: <img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw" alt="Alt"></p><p>带尺寸的图片: ![Alt](<a href="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw">https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw</a> &#x3D;30x30)</p><p>居中的图片: <img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw#pic_center" alt="Alt"></p><p>居中并且带尺寸的图片: ![Alt](<a href="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw#pic_center">https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw#pic_center</a> &#x3D;30x30)</p><p>当然，我们为了让用户更加便捷，我们增加了图片拖拽功能。</p><h2 id="如何插入一段漂亮的代码片"><a href="#如何插入一段漂亮的代码片" class="headerlink" title="如何插入一段漂亮的代码片"></a>如何插入一段漂亮的代码片</h2><p>去<a href="https://mp.csdn.net/console/configBlog">博客设置</a>页面，选择一款你喜欢的代码片高亮样式，下面展示同样高亮的 <code>代码片</code>.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// An highlighted block</span><br><span class="hljs-keyword">var</span> foo = <span class="hljs-string">&#x27;bar&#x27;</span>;<br></code></pre></td></tr></table></figure><h2 id="生成一个适合你的列表"><a href="#生成一个适合你的列表" class="headerlink" title="生成一个适合你的列表"></a>生成一个适合你的列表</h2><ul><li>项目<ul><li>项目<ul><li>项目</li></ul></li></ul></li></ul><ol><li>项目1</li><li>项目2</li><li>项目3</li></ol><ul><li><input disabled="" type="checkbox"> 计划任务</li><li><input checked="" disabled="" type="checkbox"> 完成任务</li></ul><h2 id="创建一个表格"><a href="#创建一个表格" class="headerlink" title="创建一个表格"></a>创建一个表格</h2><p>一个简单的表格是这么创建的：</p><table><thead><tr><th>项目</th><th>Value</th></tr></thead><tbody><tr><td>电脑</td><td>$1600</td></tr><tr><td>手机</td><td>$12</td></tr><tr><td>导管</td><td>$1</td></tr></tbody></table><h3 id="设定内容居中、居左、居右"><a href="#设定内容居中、居左、居右" class="headerlink" title="设定内容居中、居左、居右"></a>设定内容居中、居左、居右</h3><p>使用<code>:---------:</code>居中<br>使用<code>:----------</code>居左<br>使用<code>----------:</code>居右</p><table><thead><tr><th align="center">第一列</th><th align="right">第二列</th><th align="left">第三列</th></tr></thead><tbody><tr><td align="center">第一列文本居中</td><td align="right">第二列文本居右</td><td align="left">第三列文本居左</td></tr></tbody></table><h3 id="SmartyPants"><a href="#SmartyPants" class="headerlink" title="SmartyPants"></a>SmartyPants</h3><p>SmartyPants将ASCII标点字符转换为“智能”印刷标点HTML实体。例如：</p><table><thead><tr><th>TYPE</th><th>ASCII</th><th>HTML</th></tr></thead><tbody><tr><td>Single backticks</td><td><code>&#39;Isn&#39;t this fun?&#39;</code></td><td>‘Isn’t this fun?’</td></tr><tr><td>Quotes</td><td><code>&quot;Isn&#39;t this fun?&quot;</code></td><td>“Isn’t this fun?”</td></tr><tr><td>Dashes</td><td><code>-- is en-dash, --- is em-dash</code></td><td>– is en-dash, — is em-dash</td></tr></tbody></table><h2 id="创建一个自定义列表"><a href="#创建一个自定义列表" class="headerlink" title="创建一个自定义列表"></a>创建一个自定义列表</h2><dl><dt>Markdown</dt><dd>Text-to-HTML conversion tool</dd></dl><dl><dt>Authors<br>:  John</dt><dd>Luke</dd></dl><h2 id="如何创建一个注脚"><a href="#如何创建一个注脚" class="headerlink" title="如何创建一个注脚"></a>如何创建一个注脚</h2><p>一个具有注脚的文本。<sup id="fnref:2" class="footnote-ref"><a href="#fn:2" rel="footnote"><span class="hint--top hint--rounded" aria-label="注脚的解释"><a href="https://mermaidjs.github.io/">2</a></span></a></sup></p><h2 id="注释也是必不可少的"><a href="#注释也是必不可少的" class="headerlink" title="注释也是必不可少的"></a>注释也是必不可少的</h2><p>Markdown将文本转换为 HTML。</p><p>*[HTML]:   超文本标记语言</p><h2 id="KaTeX数学公式"><a href="#KaTeX数学公式" class="headerlink" title="KaTeX数学公式"></a>KaTeX数学公式</h2><p>您可以使用渲染LaTeX数学表达式 <a href="https://khan.github.io/KaTeX/">KaTeX</a>:</p><p>Gamma公式展示 $\Gamma(n) &#x3D; (n-1)!\quad\forall<br>n\in\mathbb N$ 是通过欧拉积分</p><p>$$<br>\Gamma(z) &#x3D; \int_0^\infty t^{z-1}e^{-t}dt,.<br>$$</p><blockquote><p>你可以找到更多关于的信息 <strong>LaTeX</strong> 数学表达式<a href="http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference">here</a>.</p></blockquote><h2 id="新的甘特图功能，丰富你的文章"><a href="#新的甘特图功能，丰富你的文章" class="headerlink" title="新的甘特图功能，丰富你的文章"></a>新的甘特图功能，丰富你的文章</h2><pre><code class=" mermaid">gantt        dateFormat  YYYY-MM-DD        title Adding GANTT diagram functionality to mermaid        section 现有任务        已完成               :done,    des1, 2014-01-06,2014-01-08        进行中               :active,  des2, 2014-01-09, 3d        计划一               :         des3, after des2, 5d        计划二               :         des4, after des3, 5d</code></pre><ul><li>关于 <strong>甘特图</strong> 语法，参考 <a href="https://mermaidjs.github.io/">这儿</a>,</li></ul><h2 id="UML-图表"><a href="#UML-图表" class="headerlink" title="UML 图表"></a>UML 图表</h2><p>可以使用UML图表进行渲染。 <a href="https://mermaidjs.github.io/">Mermaid</a>. 例如下面产生的一个序列图：</p><pre><code class=" mermaid">sequenceDiagram张三 -&gt;&gt; 李四: 你好！李四, 最近怎么样?李四--&gt;&gt;王五: 你最近怎么样，王五？李四--x 张三: 我很好，谢谢!李四-x 王五: 我很好，谢谢!Note right of 王五: 李四想了很长时间, 文字太长了&lt;br/&gt;不适合放在一行.李四--&gt;&gt;张三: 打量着王五...张三-&gt;&gt;王五: 很好... 王五, 你怎么样?</code></pre><p>这将产生一个流程图。:</p><pre><code class=" mermaid">graph LRA[长方形] -- 链接 --&gt; B((圆))A --&gt; C(圆角长方形)B --&gt; D&#123;菱形&#125;C --&gt; D</code></pre><ul><li>关于 <strong>Mermaid</strong> 语法，参考 <a href="https://mermaidjs.github.io/">这儿</a>,</li></ul><h2 id="FLowchart流程图"><a href="#FLowchart流程图" class="headerlink" title="FLowchart流程图"></a>FLowchart流程图</h2><p>我们依旧会支持flowchart的流程图：</p><pre><code class=" mermaid">flowchatst=&gt;start: 开始e=&gt;end: 结束op=&gt;operation: 我的操作cond=&gt;condition: 确认？st-&gt;op-&gt;condcond(yes)-&gt;econd(no)-&gt;op</code></pre><ul><li>关于 <strong>Flowchart流程图</strong> 语法，参考 <a href="http://adrai.github.io/flowchart.js/">这儿</a>.</li></ul><h2 id="导出与导入"><a href="#导出与导入" class="headerlink" title="导出与导入"></a>导出与导入</h2><h3 id="导出"><a href="#导出" class="headerlink" title="导出"></a>导出</h3><p>如果你想尝试使用此编辑器, 你可以在此篇文章任意编辑。当你完成了一篇文章的写作, 在上方工具栏找到 <strong>文章导出</strong> ，生成一个.md文件或者.html文件进行本地保存。</p><h3 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h3><p>如果你想加载一篇你写过的.md文件，在上方工具栏可以选择导入功能进行对应扩展名的文件导入，<br>继续你的创作。</p><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span><a href="https://mermaidjs.github.io/">mermaid语法说明</a><a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li><li><span id="fn:2" class="footnote-text"><span>注脚的解释<a href="#fnref:2" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    
    <tags>
      
      <tag>NOne</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/06/21/hello-world/"/>
    <url>/2023/06/21/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
